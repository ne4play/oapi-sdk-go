// Package compensation code generated by oapi sdk gen
/*
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package larkcompensation

import (
	"fmt"

	"context"
	"errors"

	"github.com/larksuite/oapi-sdk-go/v3/core"
)

const (
	UserIDTypeUserId         = "user_id"          // 以user_id来识别用户
	UserIDTypeUnionId        = "union_id"         // 以union_id来识别用户
	UserIDTypeOpenId         = "open_id"          // 以open_id来识别用户
	UserIDTypePeopleCorehrId = "people_corehr_id" // 以people_corehr_id来识别用户
)

const (
	ItemTypeSalary           = "salary"            // 基本薪资
	ItemTypeBonus            = "bonus"             // 一次性支付
	ItemTypeRecurringPayment = "recurring_payment" // 经常性支付
)

type AdjustmentLogic struct {
	Fixed *string `json:"fixed,omitempty"` // 固定值

	Formula *Formula `json:"formula,omitempty"` // 公式配置
}

type AdjustmentLogicBuilder struct {
	fixed     string // 固定值
	fixedFlag bool

	formula     *Formula // 公式配置
	formulaFlag bool
}

func NewAdjustmentLogicBuilder() *AdjustmentLogicBuilder {
	builder := &AdjustmentLogicBuilder{}
	return builder
}

// 固定值
//
// 示例值：60
func (builder *AdjustmentLogicBuilder) Fixed(fixed string) *AdjustmentLogicBuilder {
	builder.fixed = fixed
	builder.fixedFlag = true
	return builder
}

// 公式配置
//
// 示例值：
func (builder *AdjustmentLogicBuilder) Formula(formula *Formula) *AdjustmentLogicBuilder {
	builder.formula = formula
	builder.formulaFlag = true
	return builder
}

func (builder *AdjustmentLogicBuilder) Build() *AdjustmentLogic {
	req := &AdjustmentLogic{}
	if builder.fixedFlag {
		req.Fixed = &builder.fixed

	}
	if builder.formulaFlag {
		req.Formula = builder.formula
	}
	return req
}

type Archive struct {
	ArchiveId *string `json:"archive_id,omitempty"` // 档案ID

	ArchiveTid *string `json:"archive_tid,omitempty"` // 档案时间轴版本ID

	UserId *string `json:"user_id,omitempty"` // 员工ID

	Plan *Plan `json:"plan,omitempty"` // 关联方案

	EffectiveDate *string `json:"effective_date,omitempty"` // 档案生效时间
}

type ArchiveBuilder struct {
	archiveId     string // 档案ID
	archiveIdFlag bool

	archiveTid     string // 档案时间轴版本ID
	archiveTidFlag bool

	userId     string // 员工ID
	userIdFlag bool

	plan     *Plan // 关联方案
	planFlag bool

	effectiveDate     string // 档案生效时间
	effectiveDateFlag bool
}

func NewArchiveBuilder() *ArchiveBuilder {
	builder := &ArchiveBuilder{}
	return builder
}

// 档案ID
//
// 示例值：7196951947268589113
func (builder *ArchiveBuilder) ArchiveId(archiveId string) *ArchiveBuilder {
	builder.archiveId = archiveId
	builder.archiveIdFlag = true
	return builder
}

// 档案时间轴版本ID
//
// 示例值：7209959917078201911
func (builder *ArchiveBuilder) ArchiveTid(archiveTid string) *ArchiveBuilder {
	builder.archiveTid = archiveTid
	builder.archiveTidFlag = true
	return builder
}

// 员工ID
//
// 示例值：7117649868058789407
func (builder *ArchiveBuilder) UserId(userId string) *ArchiveBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}

// 关联方案
//
// 示例值：
func (builder *ArchiveBuilder) Plan(plan *Plan) *ArchiveBuilder {
	builder.plan = plan
	builder.planFlag = true
	return builder
}

// 档案生效时间
//
// 示例值：2022-03-18
func (builder *ArchiveBuilder) EffectiveDate(effectiveDate string) *ArchiveBuilder {
	builder.effectiveDate = effectiveDate
	builder.effectiveDateFlag = true
	return builder
}

func (builder *ArchiveBuilder) Build() *Archive {
	req := &Archive{}
	if builder.archiveIdFlag {
		req.ArchiveId = &builder.archiveId

	}
	if builder.archiveTidFlag {
		req.ArchiveTid = &builder.archiveTid

	}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.planFlag {
		req.Plan = builder.plan
	}
	if builder.effectiveDateFlag {
		req.EffectiveDate = &builder.effectiveDate

	}
	return req
}

type ArchiveDetail struct {
	UserId *string `json:"user_id,omitempty"` // 员工ID

	Id *string `json:"id,omitempty"` // 档案ID

	Tid *string `json:"tid,omitempty"` // 档案TID

	PlanId *string `json:"plan_id,omitempty"` // 关联方案ID，详细信息可以通过[批量查询薪资方案](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/compensation-v1/plan/list)接口查询获得

	PlanTid *string `json:"plan_tid,omitempty"` // 关联方案TID，详细信息可以通过[批量查询薪资方案](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/compensation-v1/plan/list)接口查询获得

	CurrencyId *string `json:"currency_id,omitempty"` // 档案币种ID，详细信息可以通过[查询货币信息v2](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/basic_info-currency/search)接口查询获得

	ChangeReasonId *string `json:"change_reason_id,omitempty"` // 调薪原因ID，详细信息可以通过[批量查询定调薪原因](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/compensation-v1/change_reason/list)接口查询获得

	ChangeDescription *string `json:"change_description,omitempty"` // 调薪说明

	EffectiveDate *string `json:"effective_date,omitempty"` // 生效时间

	ExpirationDate *string `json:"expiration_date,omitempty"` // 失效时间

	SalaryLevelId *string `json:"salary_level_id,omitempty"` // 薪级薪等ID

	CreatedTime *string `json:"created_time,omitempty"` // 创建时间

	UpdatedTime *string `json:"updated_time,omitempty"` // 更新时间

	ArchiveItems []*ArchiveItem `json:"archive_items,omitempty"` // 档案关联的薪资项

	ArchiveIndicators []*ArchiveIndicator `json:"archive_indicators,omitempty"` // 档案关联的薪资指标
}

type ArchiveDetailBuilder struct {
	userId     string // 员工ID
	userIdFlag bool

	id     string // 档案ID
	idFlag bool

	tid     string // 档案TID
	tidFlag bool

	planId     string // 关联方案ID，详细信息可以通过[批量查询薪资方案](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/compensation-v1/plan/list)接口查询获得
	planIdFlag bool

	planTid     string // 关联方案TID，详细信息可以通过[批量查询薪资方案](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/compensation-v1/plan/list)接口查询获得
	planTidFlag bool

	currencyId     string // 档案币种ID，详细信息可以通过[查询货币信息v2](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/basic_info-currency/search)接口查询获得
	currencyIdFlag bool

	changeReasonId     string // 调薪原因ID，详细信息可以通过[批量查询定调薪原因](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/compensation-v1/change_reason/list)接口查询获得
	changeReasonIdFlag bool

	changeDescription     string // 调薪说明
	changeDescriptionFlag bool

	effectiveDate     string // 生效时间
	effectiveDateFlag bool

	expirationDate     string // 失效时间
	expirationDateFlag bool

	salaryLevelId     string // 薪级薪等ID
	salaryLevelIdFlag bool

	createdTime     string // 创建时间
	createdTimeFlag bool

	updatedTime     string // 更新时间
	updatedTimeFlag bool

	archiveItems     []*ArchiveItem // 档案关联的薪资项
	archiveItemsFlag bool

	archiveIndicators     []*ArchiveIndicator // 档案关联的薪资指标
	archiveIndicatorsFlag bool
}

func NewArchiveDetailBuilder() *ArchiveDetailBuilder {
	builder := &ArchiveDetailBuilder{}
	return builder
}

// 员工ID
//
// 示例值：344325234123
func (builder *ArchiveDetailBuilder) UserId(userId string) *ArchiveDetailBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}

// 档案ID
//
// 示例值：32141234412
func (builder *ArchiveDetailBuilder) Id(id string) *ArchiveDetailBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 档案TID
//
// 示例值：141541351
func (builder *ArchiveDetailBuilder) Tid(tid string) *ArchiveDetailBuilder {
	builder.tid = tid
	builder.tidFlag = true
	return builder
}

// 关联方案ID，详细信息可以通过[批量查询薪资方案](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/compensation-v1/plan/list)接口查询获得
//
// 示例值：123412433
func (builder *ArchiveDetailBuilder) PlanId(planId string) *ArchiveDetailBuilder {
	builder.planId = planId
	builder.planIdFlag = true
	return builder
}

// 关联方案TID，详细信息可以通过[批量查询薪资方案](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/compensation-v1/plan/list)接口查询获得
//
// 示例值：213412343
func (builder *ArchiveDetailBuilder) PlanTid(planTid string) *ArchiveDetailBuilder {
	builder.planTid = planTid
	builder.planTidFlag = true
	return builder
}

// 档案币种ID，详细信息可以通过[查询货币信息v2](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/basic_info-currency/search)接口查询获得
//
// 示例值：324167823
func (builder *ArchiveDetailBuilder) CurrencyId(currencyId string) *ArchiveDetailBuilder {
	builder.currencyId = currencyId
	builder.currencyIdFlag = true
	return builder
}

// 调薪原因ID，详细信息可以通过[批量查询定调薪原因](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/compensation-v1/change_reason/list)接口查询获得
//
// 示例值：321414123
func (builder *ArchiveDetailBuilder) ChangeReasonId(changeReasonId string) *ArchiveDetailBuilder {
	builder.changeReasonId = changeReasonId
	builder.changeReasonIdFlag = true
	return builder
}

// 调薪说明
//
// 示例值：长期表现优异，产出高，本次给出涨幅
func (builder *ArchiveDetailBuilder) ChangeDescription(changeDescription string) *ArchiveDetailBuilder {
	builder.changeDescription = changeDescription
	builder.changeDescriptionFlag = true
	return builder
}

// 生效时间
//
// 示例值：2022-10-23
func (builder *ArchiveDetailBuilder) EffectiveDate(effectiveDate string) *ArchiveDetailBuilder {
	builder.effectiveDate = effectiveDate
	builder.effectiveDateFlag = true
	return builder
}

// 失效时间
//
// 示例值：2022-10-24
func (builder *ArchiveDetailBuilder) ExpirationDate(expirationDate string) *ArchiveDetailBuilder {
	builder.expirationDate = expirationDate
	builder.expirationDateFlag = true
	return builder
}

// 薪级薪等ID
//
// 示例值：12342313
func (builder *ArchiveDetailBuilder) SalaryLevelId(salaryLevelId string) *ArchiveDetailBuilder {
	builder.salaryLevelId = salaryLevelId
	builder.salaryLevelIdFlag = true
	return builder
}

// 创建时间
//
// 示例值：2024-01-01 00:00:00
func (builder *ArchiveDetailBuilder) CreatedTime(createdTime string) *ArchiveDetailBuilder {
	builder.createdTime = createdTime
	builder.createdTimeFlag = true
	return builder
}

// 更新时间
//
// 示例值：2024-01-01 00:00:00
func (builder *ArchiveDetailBuilder) UpdatedTime(updatedTime string) *ArchiveDetailBuilder {
	builder.updatedTime = updatedTime
	builder.updatedTimeFlag = true
	return builder
}

// 档案关联的薪资项
//
// 示例值：
func (builder *ArchiveDetailBuilder) ArchiveItems(archiveItems []*ArchiveItem) *ArchiveDetailBuilder {
	builder.archiveItems = archiveItems
	builder.archiveItemsFlag = true
	return builder
}

// 档案关联的薪资指标
//
// 示例值：
func (builder *ArchiveDetailBuilder) ArchiveIndicators(archiveIndicators []*ArchiveIndicator) *ArchiveDetailBuilder {
	builder.archiveIndicators = archiveIndicators
	builder.archiveIndicatorsFlag = true
	return builder
}

func (builder *ArchiveDetailBuilder) Build() *ArchiveDetail {
	req := &ArchiveDetail{}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.tidFlag {
		req.Tid = &builder.tid

	}
	if builder.planIdFlag {
		req.PlanId = &builder.planId

	}
	if builder.planTidFlag {
		req.PlanTid = &builder.planTid

	}
	if builder.currencyIdFlag {
		req.CurrencyId = &builder.currencyId

	}
	if builder.changeReasonIdFlag {
		req.ChangeReasonId = &builder.changeReasonId

	}
	if builder.changeDescriptionFlag {
		req.ChangeDescription = &builder.changeDescription

	}
	if builder.effectiveDateFlag {
		req.EffectiveDate = &builder.effectiveDate

	}
	if builder.expirationDateFlag {
		req.ExpirationDate = &builder.expirationDate

	}
	if builder.salaryLevelIdFlag {
		req.SalaryLevelId = &builder.salaryLevelId

	}
	if builder.createdTimeFlag {
		req.CreatedTime = &builder.createdTime

	}
	if builder.updatedTimeFlag {
		req.UpdatedTime = &builder.updatedTime

	}
	if builder.archiveItemsFlag {
		req.ArchiveItems = builder.archiveItems
	}
	if builder.archiveIndicatorsFlag {
		req.ArchiveIndicators = builder.archiveIndicators
	}
	return req
}

type ArchiveIndicator struct {
	IndicatorId *string `json:"indicator_id,omitempty"` // 薪资统计指标ID，详细信息可以通过[批量查询薪资统计指标](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/compensation-v1/indicator/list)接口查询获得

	IndicatorResult *string `json:"indicator_result,omitempty"` // 档案关联薪资统计指标数值

	IndicatorResultRegular *string `json:"indicator_result_regular,omitempty"` // 档案关联薪资统计指标转正后数值
}

type ArchiveIndicatorBuilder struct {
	indicatorId     string // 薪资统计指标ID，详细信息可以通过[批量查询薪资统计指标](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/compensation-v1/indicator/list)接口查询获得
	indicatorIdFlag bool

	indicatorResult     string // 档案关联薪资统计指标数值
	indicatorResultFlag bool

	indicatorResultRegular     string // 档案关联薪资统计指标转正后数值
	indicatorResultRegularFlag bool
}

func NewArchiveIndicatorBuilder() *ArchiveIndicatorBuilder {
	builder := &ArchiveIndicatorBuilder{}
	return builder
}

// 薪资统计指标ID，详细信息可以通过[批量查询薪资统计指标](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/compensation-v1/indicator/list)接口查询获得
//
// 示例值：23141423
func (builder *ArchiveIndicatorBuilder) IndicatorId(indicatorId string) *ArchiveIndicatorBuilder {
	builder.indicatorId = indicatorId
	builder.indicatorIdFlag = true
	return builder
}

// 档案关联薪资统计指标数值
//
// 示例值：15000
func (builder *ArchiveIndicatorBuilder) IndicatorResult(indicatorResult string) *ArchiveIndicatorBuilder {
	builder.indicatorResult = indicatorResult
	builder.indicatorResultFlag = true
	return builder
}

// 档案关联薪资统计指标转正后数值
//
// 示例值：18000
func (builder *ArchiveIndicatorBuilder) IndicatorResultRegular(indicatorResultRegular string) *ArchiveIndicatorBuilder {
	builder.indicatorResultRegular = indicatorResultRegular
	builder.indicatorResultRegularFlag = true
	return builder
}

func (builder *ArchiveIndicatorBuilder) Build() *ArchiveIndicator {
	req := &ArchiveIndicator{}
	if builder.indicatorIdFlag {
		req.IndicatorId = &builder.indicatorId

	}
	if builder.indicatorResultFlag {
		req.IndicatorResult = &builder.indicatorResult

	}
	if builder.indicatorResultRegularFlag {
		req.IndicatorResultRegular = &builder.indicatorResultRegular

	}
	return req
}

type ArchiveItem struct {
	ItemId *string `json:"item_id,omitempty"` // 薪酬项ID，详细信息可以通过[批量查询薪资项](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/compensation-v1/item/list)接口查询获得

	ItemResult *string `json:"item_result,omitempty"` // 档案关联薪酬项数值

	ItemResultRegular *string `json:"item_result_regular,omitempty"` // 档案关联薪酬项转正后数值
}

type ArchiveItemBuilder struct {
	itemId     string // 薪酬项ID，详细信息可以通过[批量查询薪资项](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/compensation-v1/item/list)接口查询获得
	itemIdFlag bool

	itemResult     string // 档案关联薪酬项数值
	itemResultFlag bool

	itemResultRegular     string // 档案关联薪酬项转正后数值
	itemResultRegularFlag bool
}

func NewArchiveItemBuilder() *ArchiveItemBuilder {
	builder := &ArchiveItemBuilder{}
	return builder
}

// 薪酬项ID，详细信息可以通过[批量查询薪资项](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/compensation-v1/item/list)接口查询获得
//
// 示例值：213423144
func (builder *ArchiveItemBuilder) ItemId(itemId string) *ArchiveItemBuilder {
	builder.itemId = itemId
	builder.itemIdFlag = true
	return builder
}

// 档案关联薪酬项数值
//
// 示例值：15000
func (builder *ArchiveItemBuilder) ItemResult(itemResult string) *ArchiveItemBuilder {
	builder.itemResult = itemResult
	builder.itemResultFlag = true
	return builder
}

// 档案关联薪酬项转正后数值
//
// 示例值：18000
func (builder *ArchiveItemBuilder) ItemResultRegular(itemResultRegular string) *ArchiveItemBuilder {
	builder.itemResultRegular = itemResultRegular
	builder.itemResultRegularFlag = true
	return builder
}

func (builder *ArchiveItemBuilder) Build() *ArchiveItem {
	req := &ArchiveItem{}
	if builder.itemIdFlag {
		req.ItemId = &builder.itemId

	}
	if builder.itemResultFlag {
		req.ItemResult = &builder.itemResult

	}
	if builder.itemResultRegularFlag {
		req.ItemResultRegular = &builder.itemResultRegular

	}
	return req
}

type ArchiveItemValue struct {
	ItemId *string `json:"item_id,omitempty"` // 薪资项ID

	ItemValue *string `json:"item_value,omitempty"` // 薪资项的值

	ItemValueRegular *string `json:"item_value_regular,omitempty"` // 员工转正后薪资项的值，仅用于开启试用期的薪资方案，以及员工处于实习期
}

type ArchiveItemValueBuilder struct {
	itemId     string // 薪资项ID
	itemIdFlag bool

	itemValue     string // 薪资项的值
	itemValueFlag bool

	itemValueRegular     string // 员工转正后薪资项的值，仅用于开启试用期的薪资方案，以及员工处于实习期
	itemValueRegularFlag bool
}

func NewArchiveItemValueBuilder() *ArchiveItemValueBuilder {
	builder := &ArchiveItemValueBuilder{}
	return builder
}

// 薪资项ID
//
// 示例值：7244131355509917228
func (builder *ArchiveItemValueBuilder) ItemId(itemId string) *ArchiveItemValueBuilder {
	builder.itemId = itemId
	builder.itemIdFlag = true
	return builder
}

// 薪资项的值
//
// 示例值：200.00
func (builder *ArchiveItemValueBuilder) ItemValue(itemValue string) *ArchiveItemValueBuilder {
	builder.itemValue = itemValue
	builder.itemValueFlag = true
	return builder
}

// 员工转正后薪资项的值，仅用于开启试用期的薪资方案，以及员工处于实习期
//
// 示例值：600.00
func (builder *ArchiveItemValueBuilder) ItemValueRegular(itemValueRegular string) *ArchiveItemValueBuilder {
	builder.itemValueRegular = itemValueRegular
	builder.itemValueRegularFlag = true
	return builder
}

func (builder *ArchiveItemValueBuilder) Build() *ArchiveItemValue {
	req := &ArchiveItemValue{}
	if builder.itemIdFlag {
		req.ItemId = &builder.itemId

	}
	if builder.itemValueFlag {
		req.ItemValue = &builder.itemValue

	}
	if builder.itemValueRegularFlag {
		req.ItemValueRegular = &builder.itemValueRegular

	}
	return req
}

type ChangeReason struct {
	Id *string `json:"id,omitempty"` // 调薪原因ID

	Name *string `json:"name,omitempty"` // 调薪原因名称

	Note *string `json:"note,omitempty"` // 调薪原因备注

	ActiveStatus *int `json:"active_status,omitempty"` // 启用状态

	I18nNames []*I18nContent `json:"i18n_names,omitempty"` // 多语言名称

	I18nNotes []*I18nContent `json:"i18n_notes,omitempty"` // 多语言描述
}

type ChangeReasonBuilder struct {
	id     string // 调薪原因ID
	idFlag bool

	name     string // 调薪原因名称
	nameFlag bool

	note     string // 调薪原因备注
	noteFlag bool

	activeStatus     int // 启用状态
	activeStatusFlag bool

	i18nNames     []*I18nContent // 多语言名称
	i18nNamesFlag bool

	i18nNotes     []*I18nContent // 多语言描述
	i18nNotesFlag bool
}

func NewChangeReasonBuilder() *ChangeReasonBuilder {
	builder := &ChangeReasonBuilder{}
	return builder
}

// 调薪原因ID
//
// 示例值：7196951947268589113
func (builder *ChangeReasonBuilder) Id(id string) *ChangeReasonBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 调薪原因名称
//
// 示例值：入职调薪
func (builder *ChangeReasonBuilder) Name(name string) *ChangeReasonBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 调薪原因备注
//
// 示例值：入职时使用的调薪原因
func (builder *ChangeReasonBuilder) Note(note string) *ChangeReasonBuilder {
	builder.note = note
	builder.noteFlag = true
	return builder
}

// 启用状态
//
// 示例值：1
func (builder *ChangeReasonBuilder) ActiveStatus(activeStatus int) *ChangeReasonBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}

// 多语言名称
//
// 示例值：
func (builder *ChangeReasonBuilder) I18nNames(i18nNames []*I18nContent) *ChangeReasonBuilder {
	builder.i18nNames = i18nNames
	builder.i18nNamesFlag = true
	return builder
}

// 多语言描述
//
// 示例值：
func (builder *ChangeReasonBuilder) I18nNotes(i18nNotes []*I18nContent) *ChangeReasonBuilder {
	builder.i18nNotes = i18nNotes
	builder.i18nNotesFlag = true
	return builder
}

func (builder *ChangeReasonBuilder) Build() *ChangeReason {
	req := &ChangeReason{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.noteFlag {
		req.Note = &builder.note

	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	if builder.i18nNamesFlag {
		req.I18nNames = builder.i18nNames
	}
	if builder.i18nNotesFlag {
		req.I18nNotes = builder.i18nNotes
	}
	return req
}

type DepartmentId struct {
	DepartmentId *string `json:"department_id,omitempty"` //

	OpenDepartmentId *string `json:"open_department_id,omitempty"` //
}

type DepartmentIdBuilder struct {
	departmentId     string //
	departmentIdFlag bool

	openDepartmentId     string //
	openDepartmentIdFlag bool
}

func NewDepartmentIdBuilder() *DepartmentIdBuilder {
	builder := &DepartmentIdBuilder{}
	return builder
}

// 示例值：
func (builder *DepartmentIdBuilder) DepartmentId(departmentId string) *DepartmentIdBuilder {
	builder.departmentId = departmentId
	builder.departmentIdFlag = true
	return builder
}

// 示例值：
func (builder *DepartmentIdBuilder) OpenDepartmentId(openDepartmentId string) *DepartmentIdBuilder {
	builder.openDepartmentId = openDepartmentId
	builder.openDepartmentIdFlag = true
	return builder
}

func (builder *DepartmentIdBuilder) Build() *DepartmentId {
	req := &DepartmentId{}
	if builder.departmentIdFlag {
		req.DepartmentId = &builder.departmentId

	}
	if builder.openDepartmentIdFlag {
		req.OpenDepartmentId = &builder.openDepartmentId

	}
	return req
}

type Formula struct {
	Expr *string `json:"expr,omitempty"` // 公式表达式

	FormulaParams []*FormulaParam `json:"formula_params,omitempty"` // 公式参数列表
}

type FormulaBuilder struct {
	expr     string // 公式表达式
	exprFlag bool

	formulaParams     []*FormulaParam // 公式参数列表
	formulaParamsFlag bool
}

func NewFormulaBuilder() *FormulaBuilder {
	builder := &FormulaBuilder{}
	return builder
}

// 公式表达式
//
// 示例值：${0} +${1}
func (builder *FormulaBuilder) Expr(expr string) *FormulaBuilder {
	builder.expr = expr
	builder.exprFlag = true
	return builder
}

// 公式参数列表
//
// 示例值：
func (builder *FormulaBuilder) FormulaParams(formulaParams []*FormulaParam) *FormulaBuilder {
	builder.formulaParams = formulaParams
	builder.formulaParamsFlag = true
	return builder
}

func (builder *FormulaBuilder) Build() *Formula {
	req := &Formula{}
	if builder.exprFlag {
		req.Expr = &builder.expr

	}
	if builder.formulaParamsFlag {
		req.FormulaParams = builder.formulaParams
	}
	return req
}

type FormulaParam struct {
	RefType *int `json:"ref_type,omitempty"` // 引用类型

	Id *string `json:"id,omitempty"` // 引用类型ID
}

type FormulaParamBuilder struct {
	refType     int // 引用类型
	refTypeFlag bool

	id     string // 引用类型ID
	idFlag bool
}

func NewFormulaParamBuilder() *FormulaParamBuilder {
	builder := &FormulaParamBuilder{}
	return builder
}

// 引用类型
//
// 示例值：1
func (builder *FormulaParamBuilder) RefType(refType int) *FormulaParamBuilder {
	builder.refType = refType
	builder.refTypeFlag = true
	return builder
}

// 引用类型ID
//
// 示例值：23143242
func (builder *FormulaParamBuilder) Id(id string) *FormulaParamBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

func (builder *FormulaParamBuilder) Build() *FormulaParam {
	req := &FormulaParam{}
	if builder.refTypeFlag {
		req.RefType = &builder.refType

	}
	if builder.idFlag {
		req.Id = &builder.id

	}
	return req
}

type I18n struct {
	ZhCn *string `json:"zh_cn,omitempty"` // 中文名称

	EnUs *string `json:"en_us,omitempty"` // 英文名称
}

type I18nBuilder struct {
	zhCn     string // 中文名称
	zhCnFlag bool

	enUs     string // 英文名称
	enUsFlag bool
}

func NewI18nBuilder() *I18nBuilder {
	builder := &I18nBuilder{}
	return builder
}

// 中文名称
//
// 示例值：中文名称
func (builder *I18nBuilder) ZhCn(zhCn string) *I18nBuilder {
	builder.zhCn = zhCn
	builder.zhCnFlag = true
	return builder
}

// 英文名称
//
// 示例值：english_name
func (builder *I18nBuilder) EnUs(enUs string) *I18nBuilder {
	builder.enUs = enUs
	builder.enUsFlag = true
	return builder
}

func (builder *I18nBuilder) Build() *I18n {
	req := &I18n{}
	if builder.zhCnFlag {
		req.ZhCn = &builder.zhCn

	}
	if builder.enUsFlag {
		req.EnUs = &builder.enUs

	}
	return req
}

type I18nContent struct {
	Locale *string `json:"locale,omitempty"` // 语言版本

	Value *string `json:"value,omitempty"` // 语言名称
}

type I18nContentBuilder struct {
	locale     string // 语言版本
	localeFlag bool

	value     string // 语言名称
	valueFlag bool
}

func NewI18nContentBuilder() *I18nContentBuilder {
	builder := &I18nContentBuilder{}
	return builder
}

// 语言版本
//
// 示例值：zh_cn
func (builder *I18nContentBuilder) Locale(locale string) *I18nContentBuilder {
	builder.locale = locale
	builder.localeFlag = true
	return builder
}

// 语言名称
//
// 示例值：中文名称
func (builder *I18nContentBuilder) Value(value string) *I18nContentBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}

func (builder *I18nContentBuilder) Build() *I18nContent {
	req := &I18nContent{}
	if builder.localeFlag {
		req.Locale = &builder.locale

	}
	if builder.valueFlag {
		req.Value = &builder.value

	}
	return req
}

type Indicator struct {
	Id *string `json:"id,omitempty"` // 薪资统计指标ID

	Name *string `json:"name,omitempty"` // 薪资统计指标名称

	ValueType *string `json:"value_type,omitempty"` // 薪资统计指标数值类型

	ActiveStatus *int `json:"active_status,omitempty"` // 启用状态

	I18nNames []*I18nContent `json:"i18n_names,omitempty"` // 多语言名称
}

type IndicatorBuilder struct {
	id     string // 薪资统计指标ID
	idFlag bool

	name     string // 薪资统计指标名称
	nameFlag bool

	valueType     string // 薪资统计指标数值类型
	valueTypeFlag bool

	activeStatus     int // 启用状态
	activeStatusFlag bool

	i18nNames     []*I18nContent // 多语言名称
	i18nNamesFlag bool
}

func NewIndicatorBuilder() *IndicatorBuilder {
	builder := &IndicatorBuilder{}
	return builder
}

// 薪资统计指标ID
//
// 示例值：7196951947228589113
func (builder *IndicatorBuilder) Id(id string) *IndicatorBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 薪资统计指标名称
//
// 示例值：年度现金总和
func (builder *IndicatorBuilder) Name(name string) *IndicatorBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 薪资统计指标数值类型
//
// 示例值：money
func (builder *IndicatorBuilder) ValueType(valueType string) *IndicatorBuilder {
	builder.valueType = valueType
	builder.valueTypeFlag = true
	return builder
}

// 启用状态
//
// 示例值：1
func (builder *IndicatorBuilder) ActiveStatus(activeStatus int) *IndicatorBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}

// 多语言名称
//
// 示例值：
func (builder *IndicatorBuilder) I18nNames(i18nNames []*I18nContent) *IndicatorBuilder {
	builder.i18nNames = i18nNames
	builder.i18nNamesFlag = true
	return builder
}

func (builder *IndicatorBuilder) Build() *Indicator {
	req := &Indicator{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.valueTypeFlag {
		req.ValueType = &builder.valueType

	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	if builder.i18nNamesFlag {
		req.I18nNames = builder.i18nNames
	}
	return req
}

type Item struct {
	Id *string `json:"id,omitempty"` // 薪酬项ID

	Name *string `json:"name,omitempty"` // 薪酬项名称

	Description *string `json:"description,omitempty"` // 薪酬项描述

	CategoryId *string `json:"category_id,omitempty"` // 薪酬项分类ID，详细信息可以通过[批量获取薪资项分类信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/compensation-v1/item_category/list)接口查询获得

	ValueType *string `json:"value_type,omitempty"` // 薪酬项数值类型

	PayOffFrequencyType *string `json:"pay_off_frequency_type,omitempty"` // 发放频率

	DecimalPlaces *int `json:"decimal_places,omitempty"` // 小数位数

	ActiveStatus *int `json:"active_status,omitempty"` // 启用状态

	I18nNames []*I18nContent `json:"i18n_names,omitempty"` // 多语言名称

	I18nDescriptions []*I18nContent `json:"i18n_descriptions,omitempty"` // 多语言描述

	ItemType *string `json:"item_type,omitempty"` // 薪酬项类型
}

type ItemBuilder struct {
	id     string // 薪酬项ID
	idFlag bool

	name     string // 薪酬项名称
	nameFlag bool

	description     string // 薪酬项描述
	descriptionFlag bool

	categoryId     string // 薪酬项分类ID，详细信息可以通过[批量获取薪资项分类信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/compensation-v1/item_category/list)接口查询获得
	categoryIdFlag bool

	valueType     string // 薪酬项数值类型
	valueTypeFlag bool

	payOffFrequencyType     string // 发放频率
	payOffFrequencyTypeFlag bool

	decimalPlaces     int // 小数位数
	decimalPlacesFlag bool

	activeStatus     int // 启用状态
	activeStatusFlag bool

	i18nNames     []*I18nContent // 多语言名称
	i18nNamesFlag bool

	i18nDescriptions     []*I18nContent // 多语言描述
	i18nDescriptionsFlag bool

	itemType     string // 薪酬项类型
	itemTypeFlag bool
}

func NewItemBuilder() *ItemBuilder {
	builder := &ItemBuilder{}
	return builder
}

// 薪酬项ID
//
// 示例值：7196951947268589113
func (builder *ItemBuilder) Id(id string) *ItemBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 薪酬项名称
//
// 示例值：基本月薪
func (builder *ItemBuilder) Name(name string) *ItemBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 薪酬项描述
//
// 示例值：每月份的薪酬
func (builder *ItemBuilder) Description(description string) *ItemBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

// 薪酬项分类ID，详细信息可以通过[批量获取薪资项分类信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/compensation-v1/item_category/list)接口查询获得
//
// 示例值：7196951947268589223
func (builder *ItemBuilder) CategoryId(categoryId string) *ItemBuilder {
	builder.categoryId = categoryId
	builder.categoryIdFlag = true
	return builder
}

// 薪酬项数值类型
//
// 示例值：money
func (builder *ItemBuilder) ValueType(valueType string) *ItemBuilder {
	builder.valueType = valueType
	builder.valueTypeFlag = true
	return builder
}

// 发放频率
//
// 示例值：month
func (builder *ItemBuilder) PayOffFrequencyType(payOffFrequencyType string) *ItemBuilder {
	builder.payOffFrequencyType = payOffFrequencyType
	builder.payOffFrequencyTypeFlag = true
	return builder
}

// 小数位数
//
// 示例值：2
func (builder *ItemBuilder) DecimalPlaces(decimalPlaces int) *ItemBuilder {
	builder.decimalPlaces = decimalPlaces
	builder.decimalPlacesFlag = true
	return builder
}

// 启用状态
//
// 示例值：1
func (builder *ItemBuilder) ActiveStatus(activeStatus int) *ItemBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}

// 多语言名称
//
// 示例值：
func (builder *ItemBuilder) I18nNames(i18nNames []*I18nContent) *ItemBuilder {
	builder.i18nNames = i18nNames
	builder.i18nNamesFlag = true
	return builder
}

// 多语言描述
//
// 示例值：
func (builder *ItemBuilder) I18nDescriptions(i18nDescriptions []*I18nContent) *ItemBuilder {
	builder.i18nDescriptions = i18nDescriptions
	builder.i18nDescriptionsFlag = true
	return builder
}

// 薪酬项类型
//
// 示例值：bonus
func (builder *ItemBuilder) ItemType(itemType string) *ItemBuilder {
	builder.itemType = itemType
	builder.itemTypeFlag = true
	return builder
}

func (builder *ItemBuilder) Build() *Item {
	req := &Item{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	if builder.categoryIdFlag {
		req.CategoryId = &builder.categoryId

	}
	if builder.valueTypeFlag {
		req.ValueType = &builder.valueType

	}
	if builder.payOffFrequencyTypeFlag {
		req.PayOffFrequencyType = &builder.payOffFrequencyType

	}
	if builder.decimalPlacesFlag {
		req.DecimalPlaces = &builder.decimalPlaces

	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	if builder.i18nNamesFlag {
		req.I18nNames = builder.i18nNames
	}
	if builder.i18nDescriptionsFlag {
		req.I18nDescriptions = builder.i18nDescriptions
	}
	if builder.itemTypeFlag {
		req.ItemType = &builder.itemType

	}
	return req
}

type ItemCategory struct {
	Id *string `json:"id,omitempty"` // 薪酬项分类ID

	Name *string `json:"name,omitempty"` // 薪酬项分类名称

	I18nNames []*I18nContent `json:"i18n_names,omitempty"` // 薪酬项多语言分类
}

type ItemCategoryBuilder struct {
	id     string // 薪酬项分类ID
	idFlag bool

	name     string // 薪酬项分类名称
	nameFlag bool

	i18nNames     []*I18nContent // 薪酬项多语言分类
	i18nNamesFlag bool
}

func NewItemCategoryBuilder() *ItemCategoryBuilder {
	builder := &ItemCategoryBuilder{}
	return builder
}

// 薪酬项分类ID
//
// 示例值：4532312334
func (builder *ItemCategoryBuilder) Id(id string) *ItemCategoryBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 薪酬项分类名称
//
// 示例值：基本薪资类
func (builder *ItemCategoryBuilder) Name(name string) *ItemCategoryBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 薪酬项多语言分类
//
// 示例值：
func (builder *ItemCategoryBuilder) I18nNames(i18nNames []*I18nContent) *ItemCategoryBuilder {
	builder.i18nNames = i18nNames
	builder.i18nNamesFlag = true
	return builder
}

func (builder *ItemCategoryBuilder) Build() *ItemCategory {
	req := &ItemCategory{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.i18nNamesFlag {
		req.I18nNames = builder.i18nNames
	}
	return req
}

type LumpSumPayment struct {
	Id *string `json:"id,omitempty"` // 一次性支付记录id

	UniqueId *string `json:"unique_id,omitempty"` // 外部幂等id，由上游业务决定

	UserId *string `json:"user_id,omitempty"` // 员工id，具体类型由入参中的 user_id_type 指定

	TotalAmount *string `json:"total_amount,omitempty"` // 总金额，字符串表达的数字

	BindingPeriod *int `json:"binding_period,omitempty"` // 绑定期，单位为月

	CurrencyId *string `json:"currency_id,omitempty"` // 币种id

	IssuanceFrequency *int `json:"issuance_frequency,omitempty"` // 发放次数

	GrantDate *string `json:"grant_date,omitempty"` // 授予日期

	ItemId *string `json:"item_id,omitempty"` // 薪酬项id

	Remark *string `json:"remark,omitempty"` // 备注

	IssuanceDetailText *I18n `json:"issuance_detail_text,omitempty"` // 发放规则描述文本

	ApplySource *int `json:"apply_source,omitempty"` // 申请来源

	CreateTime *string `json:"create_time,omitempty"` // 创建时间

	ModifyTime *string `json:"modify_time,omitempty"` // 更新时间

	Details []*LumpSumPaymentDetail `json:"details,omitempty"` // 发放明细列表
}

type LumpSumPaymentBuilder struct {
	id     string // 一次性支付记录id
	idFlag bool

	uniqueId     string // 外部幂等id，由上游业务决定
	uniqueIdFlag bool

	userId     string // 员工id，具体类型由入参中的 user_id_type 指定
	userIdFlag bool

	totalAmount     string // 总金额，字符串表达的数字
	totalAmountFlag bool

	bindingPeriod     int // 绑定期，单位为月
	bindingPeriodFlag bool

	currencyId     string // 币种id
	currencyIdFlag bool

	issuanceFrequency     int // 发放次数
	issuanceFrequencyFlag bool

	grantDate     string // 授予日期
	grantDateFlag bool

	itemId     string // 薪酬项id
	itemIdFlag bool

	remark     string // 备注
	remarkFlag bool

	issuanceDetailText     *I18n // 发放规则描述文本
	issuanceDetailTextFlag bool

	applySource     int // 申请来源
	applySourceFlag bool

	createTime     string // 创建时间
	createTimeFlag bool

	modifyTime     string // 更新时间
	modifyTimeFlag bool

	details     []*LumpSumPaymentDetail // 发放明细列表
	detailsFlag bool
}

func NewLumpSumPaymentBuilder() *LumpSumPaymentBuilder {
	builder := &LumpSumPaymentBuilder{}
	return builder
}

// 一次性支付记录id
//
// 示例值：7397033607132351532
func (builder *LumpSumPaymentBuilder) Id(id string) *LumpSumPaymentBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 外部幂等id，由上游业务决定
//
// 示例值：7402510801304718380_7309316347007764012_7402523725868058156_1726070400000_10000
func (builder *LumpSumPaymentBuilder) UniqueId(uniqueId string) *LumpSumPaymentBuilder {
	builder.uniqueId = uniqueId
	builder.uniqueIdFlag = true
	return builder
}

// 员工id，具体类型由入参中的 user_id_type 指定
//
// 示例值：7337149697626801708
func (builder *LumpSumPaymentBuilder) UserId(userId string) *LumpSumPaymentBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}

// 总金额，字符串表达的数字
//
// 示例值：2000.00
func (builder *LumpSumPaymentBuilder) TotalAmount(totalAmount string) *LumpSumPaymentBuilder {
	builder.totalAmount = totalAmount
	builder.totalAmountFlag = true
	return builder
}

// 绑定期，单位为月
//
// 示例值：2
func (builder *LumpSumPaymentBuilder) BindingPeriod(bindingPeriod int) *LumpSumPaymentBuilder {
	builder.bindingPeriod = bindingPeriod
	builder.bindingPeriodFlag = true
	return builder
}

// 币种id
//
// 示例值：6863329932261459464
func (builder *LumpSumPaymentBuilder) CurrencyId(currencyId string) *LumpSumPaymentBuilder {
	builder.currencyId = currencyId
	builder.currencyIdFlag = true
	return builder
}

// 发放次数
//
// 示例值：3
func (builder *LumpSumPaymentBuilder) IssuanceFrequency(issuanceFrequency int) *LumpSumPaymentBuilder {
	builder.issuanceFrequency = issuanceFrequency
	builder.issuanceFrequencyFlag = true
	return builder
}

// 授予日期
//
// 示例值：2024-08-01
func (builder *LumpSumPaymentBuilder) GrantDate(grantDate string) *LumpSumPaymentBuilder {
	builder.grantDate = grantDate
	builder.grantDateFlag = true
	return builder
}

// 薪酬项id
//
// 示例值：7411039006180312620
func (builder *LumpSumPaymentBuilder) ItemId(itemId string) *LumpSumPaymentBuilder {
	builder.itemId = itemId
	builder.itemIdFlag = true
	return builder
}

// 备注
//
// 示例值：备注
func (builder *LumpSumPaymentBuilder) Remark(remark string) *LumpSumPaymentBuilder {
	builder.remark = remark
	builder.remarkFlag = true
	return builder
}

// 发放规则描述文本
//
// 示例值：
func (builder *LumpSumPaymentBuilder) IssuanceDetailText(issuanceDetailText *I18n) *LumpSumPaymentBuilder {
	builder.issuanceDetailText = issuanceDetailText
	builder.issuanceDetailTextFlag = true
	return builder
}

// 申请来源
//
// 示例值：1
func (builder *LumpSumPaymentBuilder) ApplySource(applySource int) *LumpSumPaymentBuilder {
	builder.applySource = applySource
	builder.applySourceFlag = true
	return builder
}

// 创建时间
//
// 示例值：2024-08-01 12:34:56
func (builder *LumpSumPaymentBuilder) CreateTime(createTime string) *LumpSumPaymentBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}

// 更新时间
//
// 示例值：2024-08-01 12:34:56
func (builder *LumpSumPaymentBuilder) ModifyTime(modifyTime string) *LumpSumPaymentBuilder {
	builder.modifyTime = modifyTime
	builder.modifyTimeFlag = true
	return builder
}

// 发放明细列表
//
// 示例值：
func (builder *LumpSumPaymentBuilder) Details(details []*LumpSumPaymentDetail) *LumpSumPaymentBuilder {
	builder.details = details
	builder.detailsFlag = true
	return builder
}

func (builder *LumpSumPaymentBuilder) Build() *LumpSumPayment {
	req := &LumpSumPayment{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.uniqueIdFlag {
		req.UniqueId = &builder.uniqueId

	}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.totalAmountFlag {
		req.TotalAmount = &builder.totalAmount

	}
	if builder.bindingPeriodFlag {
		req.BindingPeriod = &builder.bindingPeriod

	}
	if builder.currencyIdFlag {
		req.CurrencyId = &builder.currencyId

	}
	if builder.issuanceFrequencyFlag {
		req.IssuanceFrequency = &builder.issuanceFrequency

	}
	if builder.grantDateFlag {
		req.GrantDate = &builder.grantDate

	}
	if builder.itemIdFlag {
		req.ItemId = &builder.itemId

	}
	if builder.remarkFlag {
		req.Remark = &builder.remark

	}
	if builder.issuanceDetailTextFlag {
		req.IssuanceDetailText = builder.issuanceDetailText
	}
	if builder.applySourceFlag {
		req.ApplySource = &builder.applySource

	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	if builder.modifyTimeFlag {
		req.ModifyTime = &builder.modifyTime

	}
	if builder.detailsFlag {
		req.Details = builder.details
	}
	return req
}

type LumpSumPaymentDetail struct {
	Id *string `json:"id,omitempty"` // 一次性支付记录明细id

	RecordId *string `json:"record_id,omitempty"` // 一次性支付记录id

	UserId *string `json:"user_id,omitempty"` // 员工id，具体类型由入参中的 user_id_type 指定

	IssuanceAmount *string `json:"issuance_amount,omitempty"` // 一次性支付明细发放金额，可转数字的字符串

	IssuanceStatus *string `json:"issuance_status,omitempty"` // 发放状态

	IssuanceWay *string `json:"issuance_way,omitempty"` // 发放方式

	IssuanceTime *string `json:"issuance_time,omitempty"` // 发放时间

	CurrencyId *string `json:"currency_id,omitempty"` // 币种id

	CreateTime *string `json:"create_time,omitempty"` // 创建时间

	ModifyTime *string `json:"modify_time,omitempty"` // 更新时间
}

type LumpSumPaymentDetailBuilder struct {
	id     string // 一次性支付记录明细id
	idFlag bool

	recordId     string // 一次性支付记录id
	recordIdFlag bool

	userId     string // 员工id，具体类型由入参中的 user_id_type 指定
	userIdFlag bool

	issuanceAmount     string // 一次性支付明细发放金额，可转数字的字符串
	issuanceAmountFlag bool

	issuanceStatus     string // 发放状态
	issuanceStatusFlag bool

	issuanceWay     string // 发放方式
	issuanceWayFlag bool

	issuanceTime     string // 发放时间
	issuanceTimeFlag bool

	currencyId     string // 币种id
	currencyIdFlag bool

	createTime     string // 创建时间
	createTimeFlag bool

	modifyTime     string // 更新时间
	modifyTimeFlag bool
}

func NewLumpSumPaymentDetailBuilder() *LumpSumPaymentDetailBuilder {
	builder := &LumpSumPaymentDetailBuilder{}
	return builder
}

// 一次性支付记录明细id
//
// 示例值：7395133551102200876
func (builder *LumpSumPaymentDetailBuilder) Id(id string) *LumpSumPaymentDetailBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 一次性支付记录id
//
// 示例值：7395133551102168108
func (builder *LumpSumPaymentDetailBuilder) RecordId(recordId string) *LumpSumPaymentDetailBuilder {
	builder.recordId = recordId
	builder.recordIdFlag = true
	return builder
}

// 员工id，具体类型由入参中的 user_id_type 指定
//
// 示例值：7337149697626801708
func (builder *LumpSumPaymentDetailBuilder) UserId(userId string) *LumpSumPaymentDetailBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}

// 一次性支付明细发放金额，可转数字的字符串
//
// 示例值：2000.00
func (builder *LumpSumPaymentDetailBuilder) IssuanceAmount(issuanceAmount string) *LumpSumPaymentDetailBuilder {
	builder.issuanceAmount = issuanceAmount
	builder.issuanceAmountFlag = true
	return builder
}

// 发放状态
//
// 示例值：to_be_issued
func (builder *LumpSumPaymentDetailBuilder) IssuanceStatus(issuanceStatus string) *LumpSumPaymentDetailBuilder {
	builder.issuanceStatus = issuanceStatus
	builder.issuanceStatusFlag = true
	return builder
}

// 发放方式
//
// 示例值：with_salary
func (builder *LumpSumPaymentDetailBuilder) IssuanceWay(issuanceWay string) *LumpSumPaymentDetailBuilder {
	builder.issuanceWay = issuanceWay
	builder.issuanceWayFlag = true
	return builder
}

// 发放时间
//
// 示例值：2024-08-01
func (builder *LumpSumPaymentDetailBuilder) IssuanceTime(issuanceTime string) *LumpSumPaymentDetailBuilder {
	builder.issuanceTime = issuanceTime
	builder.issuanceTimeFlag = true
	return builder
}

// 币种id
//
// 示例值：6863329932261459464
func (builder *LumpSumPaymentDetailBuilder) CurrencyId(currencyId string) *LumpSumPaymentDetailBuilder {
	builder.currencyId = currencyId
	builder.currencyIdFlag = true
	return builder
}

// 创建时间
//
// 示例值：2024-08-01 12:34:56
func (builder *LumpSumPaymentDetailBuilder) CreateTime(createTime string) *LumpSumPaymentDetailBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}

// 更新时间
//
// 示例值：2024-08-01 12:34:56
func (builder *LumpSumPaymentDetailBuilder) ModifyTime(modifyTime string) *LumpSumPaymentDetailBuilder {
	builder.modifyTime = modifyTime
	builder.modifyTimeFlag = true
	return builder
}

func (builder *LumpSumPaymentDetailBuilder) Build() *LumpSumPaymentDetail {
	req := &LumpSumPaymentDetail{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.recordIdFlag {
		req.RecordId = &builder.recordId

	}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.issuanceAmountFlag {
		req.IssuanceAmount = &builder.issuanceAmount

	}
	if builder.issuanceStatusFlag {
		req.IssuanceStatus = &builder.issuanceStatus

	}
	if builder.issuanceWayFlag {
		req.IssuanceWay = &builder.issuanceWay

	}
	if builder.issuanceTimeFlag {
		req.IssuanceTime = &builder.issuanceTime

	}
	if builder.currencyIdFlag {
		req.CurrencyId = &builder.currencyId

	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	if builder.modifyTimeFlag {
		req.ModifyTime = &builder.modifyTime

	}
	return req
}

type LumpSumPaymentDetailForCreate struct {
	IssuanceAmount *string `json:"issuance_amount,omitempty"` // 一次性支付明细发放金额，可转数字的字符串

	IssuanceStatus *string `json:"issuance_status,omitempty"` // 发放状态

	IssuanceWay *string `json:"issuance_way,omitempty"` // 发放方式

	IssuanceTime *string `json:"issuance_time,omitempty"` // 发放时间
}

type LumpSumPaymentDetailForCreateBuilder struct {
	issuanceAmount     string // 一次性支付明细发放金额，可转数字的字符串
	issuanceAmountFlag bool

	issuanceStatus     string // 发放状态
	issuanceStatusFlag bool

	issuanceWay     string // 发放方式
	issuanceWayFlag bool

	issuanceTime     string // 发放时间
	issuanceTimeFlag bool
}

func NewLumpSumPaymentDetailForCreateBuilder() *LumpSumPaymentDetailForCreateBuilder {
	builder := &LumpSumPaymentDetailForCreateBuilder{}
	return builder
}

// 一次性支付明细发放金额，可转数字的字符串
//
// 示例值：2000.00
func (builder *LumpSumPaymentDetailForCreateBuilder) IssuanceAmount(issuanceAmount string) *LumpSumPaymentDetailForCreateBuilder {
	builder.issuanceAmount = issuanceAmount
	builder.issuanceAmountFlag = true
	return builder
}

// 发放状态
//
// 示例值：to_be_issued
func (builder *LumpSumPaymentDetailForCreateBuilder) IssuanceStatus(issuanceStatus string) *LumpSumPaymentDetailForCreateBuilder {
	builder.issuanceStatus = issuanceStatus
	builder.issuanceStatusFlag = true
	return builder
}

// 发放方式
//
// 示例值：with_salary
func (builder *LumpSumPaymentDetailForCreateBuilder) IssuanceWay(issuanceWay string) *LumpSumPaymentDetailForCreateBuilder {
	builder.issuanceWay = issuanceWay
	builder.issuanceWayFlag = true
	return builder
}

// 发放时间
//
// 示例值：2024-08-01
func (builder *LumpSumPaymentDetailForCreateBuilder) IssuanceTime(issuanceTime string) *LumpSumPaymentDetailForCreateBuilder {
	builder.issuanceTime = issuanceTime
	builder.issuanceTimeFlag = true
	return builder
}

func (builder *LumpSumPaymentDetailForCreateBuilder) Build() *LumpSumPaymentDetailForCreate {
	req := &LumpSumPaymentDetailForCreate{}
	if builder.issuanceAmountFlag {
		req.IssuanceAmount = &builder.issuanceAmount

	}
	if builder.issuanceStatusFlag {
		req.IssuanceStatus = &builder.issuanceStatus

	}
	if builder.issuanceWayFlag {
		req.IssuanceWay = &builder.issuanceWay

	}
	if builder.issuanceTimeFlag {
		req.IssuanceTime = &builder.issuanceTime

	}
	return req
}

type LumpSumPaymentDetailForUpdate struct {
	Id *string `json:"id,omitempty"` // 一次性支付记录明细id。传入已有的id代表直接在原明细上进行更新，不传则代表创建新的明细

	IssuanceAmount *string `json:"issuance_amount,omitempty"` // 一次性支付明细发放金额，可转数字的字符串

	IssuanceStatus *string `json:"issuance_status,omitempty"` // 发放状态

	IssuanceWay *string `json:"issuance_way,omitempty"` // 发放方式

	IssuanceTime *string `json:"issuance_time,omitempty"` // 发放时间
}

type LumpSumPaymentDetailForUpdateBuilder struct {
	id     string // 一次性支付记录明细id。传入已有的id代表直接在原明细上进行更新，不传则代表创建新的明细
	idFlag bool

	issuanceAmount     string // 一次性支付明细发放金额，可转数字的字符串
	issuanceAmountFlag bool

	issuanceStatus     string // 发放状态
	issuanceStatusFlag bool

	issuanceWay     string // 发放方式
	issuanceWayFlag bool

	issuanceTime     string // 发放时间
	issuanceTimeFlag bool
}

func NewLumpSumPaymentDetailForUpdateBuilder() *LumpSumPaymentDetailForUpdateBuilder {
	builder := &LumpSumPaymentDetailForUpdateBuilder{}
	return builder
}

// 一次性支付记录明细id。传入已有的id代表直接在原明细上进行更新，不传则代表创建新的明细
//
// 示例值：7395133551102200876
func (builder *LumpSumPaymentDetailForUpdateBuilder) Id(id string) *LumpSumPaymentDetailForUpdateBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 一次性支付明细发放金额，可转数字的字符串
//
// 示例值：2000.00
func (builder *LumpSumPaymentDetailForUpdateBuilder) IssuanceAmount(issuanceAmount string) *LumpSumPaymentDetailForUpdateBuilder {
	builder.issuanceAmount = issuanceAmount
	builder.issuanceAmountFlag = true
	return builder
}

// 发放状态
//
// 示例值：to_be_issued
func (builder *LumpSumPaymentDetailForUpdateBuilder) IssuanceStatus(issuanceStatus string) *LumpSumPaymentDetailForUpdateBuilder {
	builder.issuanceStatus = issuanceStatus
	builder.issuanceStatusFlag = true
	return builder
}

// 发放方式
//
// 示例值：with_salary
func (builder *LumpSumPaymentDetailForUpdateBuilder) IssuanceWay(issuanceWay string) *LumpSumPaymentDetailForUpdateBuilder {
	builder.issuanceWay = issuanceWay
	builder.issuanceWayFlag = true
	return builder
}

// 发放时间
//
// 示例值：2024-08-01
func (builder *LumpSumPaymentDetailForUpdateBuilder) IssuanceTime(issuanceTime string) *LumpSumPaymentDetailForUpdateBuilder {
	builder.issuanceTime = issuanceTime
	builder.issuanceTimeFlag = true
	return builder
}

func (builder *LumpSumPaymentDetailForUpdateBuilder) Build() *LumpSumPaymentDetailForUpdate {
	req := &LumpSumPaymentDetailForUpdate{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.issuanceAmountFlag {
		req.IssuanceAmount = &builder.issuanceAmount

	}
	if builder.issuanceStatusFlag {
		req.IssuanceStatus = &builder.issuanceStatus

	}
	if builder.issuanceWayFlag {
		req.IssuanceWay = &builder.issuanceWay

	}
	if builder.issuanceTimeFlag {
		req.IssuanceTime = &builder.issuanceTime

	}
	return req
}

type LumpSumPaymentForCreate struct {
	UniqueId *string `json:"unique_id,omitempty"` // 外部幂等id，由上游业务决定

	UserId *string `json:"user_id,omitempty"` // 员工id，具体类型由入参中的 user_id_type 指定

	TotalAmount *string `json:"total_amount,omitempty"` // 总金额，字符串表达的数字

	BindingPeriod *int `json:"binding_period,omitempty"` // 绑定期，单位为月

	CurrencyId *string `json:"currency_id,omitempty"` // 币种id

	IssuanceFrequency *int `json:"issuance_frequency,omitempty"` // 发放次数，必须与 details 的长度一致

	GrantDate *string `json:"grant_date,omitempty"` // 授予日期

	ItemId *string `json:"item_id,omitempty"` // 薪酬项id（可通过 https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/compensation-v1/item/list?appId=cli_a3077e2bb03c100d 进行查询）

	Details []*LumpSumPaymentDetailForCreate `json:"details,omitempty"` // 发放明细列表

	Remark *string `json:"remark,omitempty"` // 备注
}

type LumpSumPaymentForCreateBuilder struct {
	uniqueId     string // 外部幂等id，由上游业务决定
	uniqueIdFlag bool

	userId     string // 员工id，具体类型由入参中的 user_id_type 指定
	userIdFlag bool

	totalAmount     string // 总金额，字符串表达的数字
	totalAmountFlag bool

	bindingPeriod     int // 绑定期，单位为月
	bindingPeriodFlag bool

	currencyId     string // 币种id
	currencyIdFlag bool

	issuanceFrequency     int // 发放次数，必须与 details 的长度一致
	issuanceFrequencyFlag bool

	grantDate     string // 授予日期
	grantDateFlag bool

	itemId     string // 薪酬项id（可通过 https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/compensation-v1/item/list?appId=cli_a3077e2bb03c100d 进行查询）
	itemIdFlag bool

	details     []*LumpSumPaymentDetailForCreate // 发放明细列表
	detailsFlag bool

	remark     string // 备注
	remarkFlag bool
}

func NewLumpSumPaymentForCreateBuilder() *LumpSumPaymentForCreateBuilder {
	builder := &LumpSumPaymentForCreateBuilder{}
	return builder
}

// 外部幂等id，由上游业务决定
//
// 示例值：7402510801304718380_7309316347007764012_7402523725868058156_1726070400000_10000
func (builder *LumpSumPaymentForCreateBuilder) UniqueId(uniqueId string) *LumpSumPaymentForCreateBuilder {
	builder.uniqueId = uniqueId
	builder.uniqueIdFlag = true
	return builder
}

// 员工id，具体类型由入参中的 user_id_type 指定
//
// 示例值：7337149697626801708
func (builder *LumpSumPaymentForCreateBuilder) UserId(userId string) *LumpSumPaymentForCreateBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}

// 总金额，字符串表达的数字
//
// 示例值：2000.00
func (builder *LumpSumPaymentForCreateBuilder) TotalAmount(totalAmount string) *LumpSumPaymentForCreateBuilder {
	builder.totalAmount = totalAmount
	builder.totalAmountFlag = true
	return builder
}

// 绑定期，单位为月
//
// 示例值：2
func (builder *LumpSumPaymentForCreateBuilder) BindingPeriod(bindingPeriod int) *LumpSumPaymentForCreateBuilder {
	builder.bindingPeriod = bindingPeriod
	builder.bindingPeriodFlag = true
	return builder
}

// 币种id
//
// 示例值：6863329932261459464
func (builder *LumpSumPaymentForCreateBuilder) CurrencyId(currencyId string) *LumpSumPaymentForCreateBuilder {
	builder.currencyId = currencyId
	builder.currencyIdFlag = true
	return builder
}

// 发放次数，必须与 details 的长度一致
//
// 示例值：3
func (builder *LumpSumPaymentForCreateBuilder) IssuanceFrequency(issuanceFrequency int) *LumpSumPaymentForCreateBuilder {
	builder.issuanceFrequency = issuanceFrequency
	builder.issuanceFrequencyFlag = true
	return builder
}

// 授予日期
//
// 示例值：2024-08-01
func (builder *LumpSumPaymentForCreateBuilder) GrantDate(grantDate string) *LumpSumPaymentForCreateBuilder {
	builder.grantDate = grantDate
	builder.grantDateFlag = true
	return builder
}

// 薪酬项id（可通过 https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/compensation-v1/item/list?appId=cli_a3077e2bb03c100d 进行查询）
//
// 示例值：7411039006180312620
func (builder *LumpSumPaymentForCreateBuilder) ItemId(itemId string) *LumpSumPaymentForCreateBuilder {
	builder.itemId = itemId
	builder.itemIdFlag = true
	return builder
}

// 发放明细列表
//
// 示例值：
func (builder *LumpSumPaymentForCreateBuilder) Details(details []*LumpSumPaymentDetailForCreate) *LumpSumPaymentForCreateBuilder {
	builder.details = details
	builder.detailsFlag = true
	return builder
}

// 备注
//
// 示例值：备注
func (builder *LumpSumPaymentForCreateBuilder) Remark(remark string) *LumpSumPaymentForCreateBuilder {
	builder.remark = remark
	builder.remarkFlag = true
	return builder
}

func (builder *LumpSumPaymentForCreateBuilder) Build() *LumpSumPaymentForCreate {
	req := &LumpSumPaymentForCreate{}
	if builder.uniqueIdFlag {
		req.UniqueId = &builder.uniqueId

	}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.totalAmountFlag {
		req.TotalAmount = &builder.totalAmount

	}
	if builder.bindingPeriodFlag {
		req.BindingPeriod = &builder.bindingPeriod

	}
	if builder.currencyIdFlag {
		req.CurrencyId = &builder.currencyId

	}
	if builder.issuanceFrequencyFlag {
		req.IssuanceFrequency = &builder.issuanceFrequency

	}
	if builder.grantDateFlag {
		req.GrantDate = &builder.grantDate

	}
	if builder.itemIdFlag {
		req.ItemId = &builder.itemId

	}
	if builder.detailsFlag {
		req.Details = builder.details
	}
	if builder.remarkFlag {
		req.Remark = &builder.remark

	}
	return req
}

type LumpSumPaymentForUpdate struct {
	Id *string `json:"id,omitempty"` // 一次性支付记录id

	TotalAmount *string `json:"total_amount,omitempty"` // 总金额，字符串表达的数字

	BindingPeriod *int `json:"binding_period,omitempty"` // 绑定期，单位为月

	CurrencyId *string `json:"currency_id,omitempty"` // 币种id

	IssuanceFrequency *int `json:"issuance_frequency,omitempty"` // 发放次数，必须与details的长度一致

	Remark *string `json:"remark,omitempty"` // 备注

	Details []*LumpSumPaymentDetailForUpdate `json:"details,omitempty"` // 发放明细列表
}

type LumpSumPaymentForUpdateBuilder struct {
	id     string // 一次性支付记录id
	idFlag bool

	totalAmount     string // 总金额，字符串表达的数字
	totalAmountFlag bool

	bindingPeriod     int // 绑定期，单位为月
	bindingPeriodFlag bool

	currencyId     string // 币种id
	currencyIdFlag bool

	issuanceFrequency     int // 发放次数，必须与details的长度一致
	issuanceFrequencyFlag bool

	remark     string // 备注
	remarkFlag bool

	details     []*LumpSumPaymentDetailForUpdate // 发放明细列表
	detailsFlag bool
}

func NewLumpSumPaymentForUpdateBuilder() *LumpSumPaymentForUpdateBuilder {
	builder := &LumpSumPaymentForUpdateBuilder{}
	return builder
}

// 一次性支付记录id
//
// 示例值：7397033607132351532
func (builder *LumpSumPaymentForUpdateBuilder) Id(id string) *LumpSumPaymentForUpdateBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 总金额，字符串表达的数字
//
// 示例值：2000.00
func (builder *LumpSumPaymentForUpdateBuilder) TotalAmount(totalAmount string) *LumpSumPaymentForUpdateBuilder {
	builder.totalAmount = totalAmount
	builder.totalAmountFlag = true
	return builder
}

// 绑定期，单位为月
//
// 示例值：2
func (builder *LumpSumPaymentForUpdateBuilder) BindingPeriod(bindingPeriod int) *LumpSumPaymentForUpdateBuilder {
	builder.bindingPeriod = bindingPeriod
	builder.bindingPeriodFlag = true
	return builder
}

// 币种id
//
// 示例值：6863329932261459464
func (builder *LumpSumPaymentForUpdateBuilder) CurrencyId(currencyId string) *LumpSumPaymentForUpdateBuilder {
	builder.currencyId = currencyId
	builder.currencyIdFlag = true
	return builder
}

// 发放次数，必须与details的长度一致
//
// 示例值：3
func (builder *LumpSumPaymentForUpdateBuilder) IssuanceFrequency(issuanceFrequency int) *LumpSumPaymentForUpdateBuilder {
	builder.issuanceFrequency = issuanceFrequency
	builder.issuanceFrequencyFlag = true
	return builder
}

// 备注
//
// 示例值：备注
func (builder *LumpSumPaymentForUpdateBuilder) Remark(remark string) *LumpSumPaymentForUpdateBuilder {
	builder.remark = remark
	builder.remarkFlag = true
	return builder
}

// 发放明细列表
//
// 示例值：
func (builder *LumpSumPaymentForUpdateBuilder) Details(details []*LumpSumPaymentDetailForUpdate) *LumpSumPaymentForUpdateBuilder {
	builder.details = details
	builder.detailsFlag = true
	return builder
}

func (builder *LumpSumPaymentForUpdateBuilder) Build() *LumpSumPaymentForUpdate {
	req := &LumpSumPaymentForUpdate{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.totalAmountFlag {
		req.TotalAmount = &builder.totalAmount

	}
	if builder.bindingPeriodFlag {
		req.BindingPeriod = &builder.bindingPeriod

	}
	if builder.currencyIdFlag {
		req.CurrencyId = &builder.currencyId

	}
	if builder.issuanceFrequencyFlag {
		req.IssuanceFrequency = &builder.issuanceFrequency

	}
	if builder.remarkFlag {
		req.Remark = &builder.remark

	}
	if builder.detailsFlag {
		req.Details = builder.details
	}
	return req
}

type LumpSumPaymentOperateResult struct {
	Id *string `json:"id,omitempty"` // 操作的记录的 id

	UniqueId *string `json:"unique_id,omitempty"` // 操作的记录的 unique_id

	Code *int `json:"code,omitempty"` // 操作结果状态码

	Message *string `json:"message,omitempty"` // 操作结果描述
}

type LumpSumPaymentOperateResultBuilder struct {
	id     string // 操作的记录的 id
	idFlag bool

	uniqueId     string // 操作的记录的 unique_id
	uniqueIdFlag bool

	code     int // 操作结果状态码
	codeFlag bool

	message     string // 操作结果描述
	messageFlag bool
}

func NewLumpSumPaymentOperateResultBuilder() *LumpSumPaymentOperateResultBuilder {
	builder := &LumpSumPaymentOperateResultBuilder{}
	return builder
}

// 操作的记录的 id
//
// 示例值：7390583861280556588
func (builder *LumpSumPaymentOperateResultBuilder) Id(id string) *LumpSumPaymentOperateResultBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 操作的记录的 unique_id
//
// 示例值：7390583861280556588
func (builder *LumpSumPaymentOperateResultBuilder) UniqueId(uniqueId string) *LumpSumPaymentOperateResultBuilder {
	builder.uniqueId = uniqueId
	builder.uniqueIdFlag = true
	return builder
}

// 操作结果状态码
//
// 示例值：21270202
func (builder *LumpSumPaymentOperateResultBuilder) Code(code int) *LumpSumPaymentOperateResultBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}

// 操作结果描述
//
// 示例值：uqniue id conflict
func (builder *LumpSumPaymentOperateResultBuilder) Message(message string) *LumpSumPaymentOperateResultBuilder {
	builder.message = message
	builder.messageFlag = true
	return builder
}

func (builder *LumpSumPaymentOperateResultBuilder) Build() *LumpSumPaymentOperateResult {
	req := &LumpSumPaymentOperateResult{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.uniqueIdFlag {
		req.UniqueId = &builder.uniqueId

	}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	if builder.messageFlag {
		req.Message = &builder.message

	}
	return req
}

type Plan struct {
	PlanId *string `json:"plan_id,omitempty"` // 方案ID

	PlanTid *string `json:"plan_tid,omitempty"` // 方案时间轴版本ID

	Name *I18n `json:"name,omitempty"` // 方案名称

	PeopleId *int `json:"people_id,omitempty"` // People系统方案ID
}

type PlanBuilder struct {
	planId     string // 方案ID
	planIdFlag bool

	planTid     string // 方案时间轴版本ID
	planTidFlag bool

	name     *I18n // 方案名称
	nameFlag bool

	peopleId     int // People系统方案ID
	peopleIdFlag bool
}

func NewPlanBuilder() *PlanBuilder {
	builder := &PlanBuilder{}
	return builder
}

// 方案ID
//
// 示例值：7234781378700985913
func (builder *PlanBuilder) PlanId(planId string) *PlanBuilder {
	builder.planId = planId
	builder.planIdFlag = true
	return builder
}

// 方案时间轴版本ID
//
// 示例值：7137286102364227108
func (builder *PlanBuilder) PlanTid(planTid string) *PlanBuilder {
	builder.planTid = planTid
	builder.planTidFlag = true
	return builder
}

// 方案名称
//
// 示例值：
func (builder *PlanBuilder) Name(name *I18n) *PlanBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// People系统方案ID
//
// 示例值：20
func (builder *PlanBuilder) PeopleId(peopleId int) *PlanBuilder {
	builder.peopleId = peopleId
	builder.peopleIdFlag = true
	return builder
}

func (builder *PlanBuilder) Build() *Plan {
	req := &Plan{}
	if builder.planIdFlag {
		req.PlanId = &builder.planId

	}
	if builder.planTidFlag {
		req.PlanTid = &builder.planTid

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.peopleIdFlag {
		req.PeopleId = &builder.peopleId

	}
	return req
}

type PlanCondition struct {
	LeftType *int `json:"left_type,omitempty"` // 适用范围左值

	Operator *int `json:"operator,omitempty"` // 适用范围操作

	RightValue []string `json:"right_value,omitempty"` // 适用范围右值
}

type PlanConditionBuilder struct {
	leftType     int // 适用范围左值
	leftTypeFlag bool

	operator     int // 适用范围操作
	operatorFlag bool

	rightValue     []string // 适用范围右值
	rightValueFlag bool
}

func NewPlanConditionBuilder() *PlanConditionBuilder {
	builder := &PlanConditionBuilder{}
	return builder
}

// 适用范围左值
//
// 示例值：7
func (builder *PlanConditionBuilder) LeftType(leftType int) *PlanConditionBuilder {
	builder.leftType = leftType
	builder.leftTypeFlag = true
	return builder
}

// 适用范围操作
//
// 示例值：1
func (builder *PlanConditionBuilder) Operator(operator int) *PlanConditionBuilder {
	builder.operator = operator
	builder.operatorFlag = true
	return builder
}

// 适用范围右值
//
// 示例值：21341234
func (builder *PlanConditionBuilder) RightValue(rightValue []string) *PlanConditionBuilder {
	builder.rightValue = rightValue
	builder.rightValueFlag = true
	return builder
}

func (builder *PlanConditionBuilder) Build() *PlanCondition {
	req := &PlanCondition{}
	if builder.leftTypeFlag {
		req.LeftType = &builder.leftType

	}
	if builder.operatorFlag {
		req.Operator = &builder.operator

	}
	if builder.rightValueFlag {
		req.RightValue = builder.rightValue
	}
	return req
}

type PlanDetail struct {
	Id *string `json:"id,omitempty"` // 薪资方案ID

	Tid *string `json:"tid,omitempty"` // 薪资方案TID

	Name *string `json:"name,omitempty"` // 薪资方案名称

	Description *string `json:"description,omitempty"` // 薪资方案描述

	EffectiveDate *string `json:"effective_date,omitempty"` // 薪资方案生效时间

	PlanScope *PlanScope `json:"plan_scope,omitempty"` // 薪资方案适用范围

	CurrencyId *string `json:"currency_id,omitempty"` // 币种ID

	ProbationSalaryStatus *bool `json:"probation_salary_status,omitempty"` // 开启试用期薪酬状态

	PlanItems []*PlanItem `json:"plan_items,omitempty"` // 方案关联的薪资项

	PlanIndicators []*PlanIndicator `json:"plan_indicators,omitempty"` // 方案关联的薪资统计指标

	I18nNames []*I18nContent `json:"i18n_names,omitempty"` // 多语言名称

	I18nDescriptions []*I18nContent `json:"i18n_descriptions,omitempty"` // 多语言描述
}

type PlanDetailBuilder struct {
	id     string // 薪资方案ID
	idFlag bool

	tid     string // 薪资方案TID
	tidFlag bool

	name     string // 薪资方案名称
	nameFlag bool

	description     string // 薪资方案描述
	descriptionFlag bool

	effectiveDate     string // 薪资方案生效时间
	effectiveDateFlag bool

	planScope     *PlanScope // 薪资方案适用范围
	planScopeFlag bool

	currencyId     string // 币种ID
	currencyIdFlag bool

	probationSalaryStatus     bool // 开启试用期薪酬状态
	probationSalaryStatusFlag bool

	planItems     []*PlanItem // 方案关联的薪资项
	planItemsFlag bool

	planIndicators     []*PlanIndicator // 方案关联的薪资统计指标
	planIndicatorsFlag bool

	i18nNames     []*I18nContent // 多语言名称
	i18nNamesFlag bool

	i18nDescriptions     []*I18nContent // 多语言描述
	i18nDescriptionsFlag bool
}

func NewPlanDetailBuilder() *PlanDetailBuilder {
	builder := &PlanDetailBuilder{}
	return builder
}

// 薪资方案ID
//
// 示例值：2134193289
func (builder *PlanDetailBuilder) Id(id string) *PlanDetailBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 薪资方案TID
//
// 示例值：129738122
func (builder *PlanDetailBuilder) Tid(tid string) *PlanDetailBuilder {
	builder.tid = tid
	builder.tidFlag = true
	return builder
}

// 薪资方案名称
//
// 示例值：基本月薪方案
func (builder *PlanDetailBuilder) Name(name string) *PlanDetailBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 薪资方案描述
//
// 示例值：基本月薪方案描述
func (builder *PlanDetailBuilder) Description(description string) *PlanDetailBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

// 薪资方案生效时间
//
// 示例值：2022-10-20
func (builder *PlanDetailBuilder) EffectiveDate(effectiveDate string) *PlanDetailBuilder {
	builder.effectiveDate = effectiveDate
	builder.effectiveDateFlag = true
	return builder
}

// 薪资方案适用范围
//
// 示例值：
func (builder *PlanDetailBuilder) PlanScope(planScope *PlanScope) *PlanDetailBuilder {
	builder.planScope = planScope
	builder.planScopeFlag = true
	return builder
}

// 币种ID
//
// 示例值：341324121
func (builder *PlanDetailBuilder) CurrencyId(currencyId string) *PlanDetailBuilder {
	builder.currencyId = currencyId
	builder.currencyIdFlag = true
	return builder
}

// 开启试用期薪酬状态
//
// 示例值：true
func (builder *PlanDetailBuilder) ProbationSalaryStatus(probationSalaryStatus bool) *PlanDetailBuilder {
	builder.probationSalaryStatus = probationSalaryStatus
	builder.probationSalaryStatusFlag = true
	return builder
}

// 方案关联的薪资项
//
// 示例值：
func (builder *PlanDetailBuilder) PlanItems(planItems []*PlanItem) *PlanDetailBuilder {
	builder.planItems = planItems
	builder.planItemsFlag = true
	return builder
}

// 方案关联的薪资统计指标
//
// 示例值：
func (builder *PlanDetailBuilder) PlanIndicators(planIndicators []*PlanIndicator) *PlanDetailBuilder {
	builder.planIndicators = planIndicators
	builder.planIndicatorsFlag = true
	return builder
}

// 多语言名称
//
// 示例值：
func (builder *PlanDetailBuilder) I18nNames(i18nNames []*I18nContent) *PlanDetailBuilder {
	builder.i18nNames = i18nNames
	builder.i18nNamesFlag = true
	return builder
}

// 多语言描述
//
// 示例值：
func (builder *PlanDetailBuilder) I18nDescriptions(i18nDescriptions []*I18nContent) *PlanDetailBuilder {
	builder.i18nDescriptions = i18nDescriptions
	builder.i18nDescriptionsFlag = true
	return builder
}

func (builder *PlanDetailBuilder) Build() *PlanDetail {
	req := &PlanDetail{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.tidFlag {
		req.Tid = &builder.tid

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	if builder.effectiveDateFlag {
		req.EffectiveDate = &builder.effectiveDate

	}
	if builder.planScopeFlag {
		req.PlanScope = builder.planScope
	}
	if builder.currencyIdFlag {
		req.CurrencyId = &builder.currencyId

	}
	if builder.probationSalaryStatusFlag {
		req.ProbationSalaryStatus = &builder.probationSalaryStatus

	}
	if builder.planItemsFlag {
		req.PlanItems = builder.planItems
	}
	if builder.planIndicatorsFlag {
		req.PlanIndicators = builder.planIndicators
	}
	if builder.i18nNamesFlag {
		req.I18nNames = builder.i18nNames
	}
	if builder.i18nDescriptionsFlag {
		req.I18nDescriptions = builder.i18nDescriptions
	}
	return req
}

type PlanIndicator struct {
	IndicatorId *string `json:"indicator_id,omitempty"` // 薪资统计指标ID，详细信息可以通过[批量查询薪资统计指标](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/compensation-v1/indicator/list)接口查询获得

	PlanIndicatorLogic *AdjustmentLogic `json:"plan_indicator_logic,omitempty"` // 方案关联薪资统计指标逻辑配置
}

type PlanIndicatorBuilder struct {
	indicatorId     string // 薪资统计指标ID，详细信息可以通过[批量查询薪资统计指标](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/compensation-v1/indicator/list)接口查询获得
	indicatorIdFlag bool

	planIndicatorLogic     *AdjustmentLogic // 方案关联薪资统计指标逻辑配置
	planIndicatorLogicFlag bool
}

func NewPlanIndicatorBuilder() *PlanIndicatorBuilder {
	builder := &PlanIndicatorBuilder{}
	return builder
}

// 薪资统计指标ID，详细信息可以通过[批量查询薪资统计指标](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/compensation-v1/indicator/list)接口查询获得
//
// 示例值：13243432
func (builder *PlanIndicatorBuilder) IndicatorId(indicatorId string) *PlanIndicatorBuilder {
	builder.indicatorId = indicatorId
	builder.indicatorIdFlag = true
	return builder
}

// 方案关联薪资统计指标逻辑配置
//
// 示例值：
func (builder *PlanIndicatorBuilder) PlanIndicatorLogic(planIndicatorLogic *AdjustmentLogic) *PlanIndicatorBuilder {
	builder.planIndicatorLogic = planIndicatorLogic
	builder.planIndicatorLogicFlag = true
	return builder
}

func (builder *PlanIndicatorBuilder) Build() *PlanIndicator {
	req := &PlanIndicator{}
	if builder.indicatorIdFlag {
		req.IndicatorId = &builder.indicatorId

	}
	if builder.planIndicatorLogicFlag {
		req.PlanIndicatorLogic = builder.planIndicatorLogic
	}
	return req
}

type PlanItem struct {
	AdjustmentType *string `json:"adjustment_type,omitempty"` // 定薪方式

	ItemId *string `json:"item_id,omitempty"` // 薪酬项ID，详细信息可以通过[批量查询薪资项](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/compensation-v1/item/list)接口查询获得

	PlanItemLogic *AdjustmentLogic `json:"plan_item_logic,omitempty"` // 方案关联薪资项逻辑配置

	ProbationDiscountType *string `json:"probation_discount_type,omitempty"` // 试用期薪酬类型

	ProbationDiscountPercentum *string `json:"probation_discount_percentum,omitempty"` // 试用期薪酬百分比
}

type PlanItemBuilder struct {
	adjustmentType     string // 定薪方式
	adjustmentTypeFlag bool

	itemId     string // 薪酬项ID，详细信息可以通过[批量查询薪资项](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/compensation-v1/item/list)接口查询获得
	itemIdFlag bool

	planItemLogic     *AdjustmentLogic // 方案关联薪资项逻辑配置
	planItemLogicFlag bool

	probationDiscountType     string // 试用期薪酬类型
	probationDiscountTypeFlag bool

	probationDiscountPercentum     string // 试用期薪酬百分比
	probationDiscountPercentumFlag bool
}

func NewPlanItemBuilder() *PlanItemBuilder {
	builder := &PlanItemBuilder{}
	return builder
}

// 定薪方式
//
// 示例值：manual
func (builder *PlanItemBuilder) AdjustmentType(adjustmentType string) *PlanItemBuilder {
	builder.adjustmentType = adjustmentType
	builder.adjustmentTypeFlag = true
	return builder
}

// 薪酬项ID，详细信息可以通过[批量查询薪资项](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/compensation-v1/item/list)接口查询获得
//
// 示例值：21341234
func (builder *PlanItemBuilder) ItemId(itemId string) *PlanItemBuilder {
	builder.itemId = itemId
	builder.itemIdFlag = true
	return builder
}

// 方案关联薪资项逻辑配置
//
// 示例值：
func (builder *PlanItemBuilder) PlanItemLogic(planItemLogic *AdjustmentLogic) *PlanItemBuilder {
	builder.planItemLogic = planItemLogic
	builder.planItemLogicFlag = true
	return builder
}

// 试用期薪酬类型
//
// 示例值：percentum
func (builder *PlanItemBuilder) ProbationDiscountType(probationDiscountType string) *PlanItemBuilder {
	builder.probationDiscountType = probationDiscountType
	builder.probationDiscountTypeFlag = true
	return builder
}

// 试用期薪酬百分比
//
// 示例值：80.00
func (builder *PlanItemBuilder) ProbationDiscountPercentum(probationDiscountPercentum string) *PlanItemBuilder {
	builder.probationDiscountPercentum = probationDiscountPercentum
	builder.probationDiscountPercentumFlag = true
	return builder
}

func (builder *PlanItemBuilder) Build() *PlanItem {
	req := &PlanItem{}
	if builder.adjustmentTypeFlag {
		req.AdjustmentType = &builder.adjustmentType

	}
	if builder.itemIdFlag {
		req.ItemId = &builder.itemId

	}
	if builder.planItemLogicFlag {
		req.PlanItemLogic = builder.planItemLogic
	}
	if builder.probationDiscountTypeFlag {
		req.ProbationDiscountType = &builder.probationDiscountType

	}
	if builder.probationDiscountPercentumFlag {
		req.ProbationDiscountPercentum = &builder.probationDiscountPercentum

	}
	return req
}

type PlanScope struct {
	IsAll *bool `json:"is_all,omitempty"` // 是否全部范围

	PlanConditions []*PlanCondition `json:"plan_conditions,omitempty"` // 方案适用范围条件组
}

type PlanScopeBuilder struct {
	isAll     bool // 是否全部范围
	isAllFlag bool

	planConditions     []*PlanCondition // 方案适用范围条件组
	planConditionsFlag bool
}

func NewPlanScopeBuilder() *PlanScopeBuilder {
	builder := &PlanScopeBuilder{}
	return builder
}

// 是否全部范围
//
// 示例值：false
func (builder *PlanScopeBuilder) IsAll(isAll bool) *PlanScopeBuilder {
	builder.isAll = isAll
	builder.isAllFlag = true
	return builder
}

// 方案适用范围条件组
//
// 示例值：
func (builder *PlanScopeBuilder) PlanConditions(planConditions []*PlanCondition) *PlanScopeBuilder {
	builder.planConditions = planConditions
	builder.planConditionsFlag = true
	return builder
}

func (builder *PlanScopeBuilder) Build() *PlanScope {
	req := &PlanScope{}
	if builder.isAllFlag {
		req.IsAll = &builder.isAll

	}
	if builder.planConditionsFlag {
		req.PlanConditions = builder.planConditions
	}
	return req
}

type RecurringPayment struct {
	Id *string `json:"id,omitempty"` // 经常性支付记录id

	UniqueId *string `json:"unique_id,omitempty"` // 外部幂等id，由上游业务决定

	UserId *string `json:"user_id,omitempty"` // 员工id，具体类型由入参中的 user_id_type 指定

	ItemId *string `json:"item_id,omitempty"` // 薪酬项id

	IssuanceType *string `json:"issuance_type,omitempty"` // 发放方式

	EachAmount *string `json:"each_amount,omitempty"` // 单次发放金额

	StartDate *string `json:"start_date,omitempty"` // 发放开始日期

	EndDate *string `json:"end_date,omitempty"` // 发放结束日期

	IssuancePeriod *string `json:"issuance_period,omitempty"` // 发放频率

	CurrencyId *string `json:"currency_id,omitempty"` // 币种id

	Remark *string `json:"remark,omitempty"` // 备注
}

type RecurringPaymentBuilder struct {
	id     string // 经常性支付记录id
	idFlag bool

	uniqueId     string // 外部幂等id，由上游业务决定
	uniqueIdFlag bool

	userId     string // 员工id，具体类型由入参中的 user_id_type 指定
	userIdFlag bool

	itemId     string // 薪酬项id
	itemIdFlag bool

	issuanceType     string // 发放方式
	issuanceTypeFlag bool

	eachAmount     string // 单次发放金额
	eachAmountFlag bool

	startDate     string // 发放开始日期
	startDateFlag bool

	endDate     string // 发放结束日期
	endDateFlag bool

	issuancePeriod     string // 发放频率
	issuancePeriodFlag bool

	currencyId     string // 币种id
	currencyIdFlag bool

	remark     string // 备注
	remarkFlag bool
}

func NewRecurringPaymentBuilder() *RecurringPaymentBuilder {
	builder := &RecurringPaymentBuilder{}
	return builder
}

// 经常性支付记录id
//
// 示例值：7397033607132351532
func (builder *RecurringPaymentBuilder) Id(id string) *RecurringPaymentBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 外部幂等id，由上游业务决定
//
// 示例值：7402510801304718380_7309316347007764012_7402523725868058156_1726070400000_10000
func (builder *RecurringPaymentBuilder) UniqueId(uniqueId string) *RecurringPaymentBuilder {
	builder.uniqueId = uniqueId
	builder.uniqueIdFlag = true
	return builder
}

// 员工id，具体类型由入参中的 user_id_type 指定
//
// 示例值：7337149697626801708
func (builder *RecurringPaymentBuilder) UserId(userId string) *RecurringPaymentBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}

// 薪酬项id
//
// 示例值：7411039006180312620
func (builder *RecurringPaymentBuilder) ItemId(itemId string) *RecurringPaymentBuilder {
	builder.itemId = itemId
	builder.itemIdFlag = true
	return builder
}

// 发放方式
//
// 示例值：with_salary
func (builder *RecurringPaymentBuilder) IssuanceType(issuanceType string) *RecurringPaymentBuilder {
	builder.issuanceType = issuanceType
	builder.issuanceTypeFlag = true
	return builder
}

// 单次发放金额
//
// 示例值：24.00
func (builder *RecurringPaymentBuilder) EachAmount(eachAmount string) *RecurringPaymentBuilder {
	builder.eachAmount = eachAmount
	builder.eachAmountFlag = true
	return builder
}

// 发放开始日期
//
// 示例值：2024-01-10
func (builder *RecurringPaymentBuilder) StartDate(startDate string) *RecurringPaymentBuilder {
	builder.startDate = startDate
	builder.startDateFlag = true
	return builder
}

// 发放结束日期
//
// 示例值：2025-01-20
func (builder *RecurringPaymentBuilder) EndDate(endDate string) *RecurringPaymentBuilder {
	builder.endDate = endDate
	builder.endDateFlag = true
	return builder
}

// 发放频率
//
// 示例值：year
func (builder *RecurringPaymentBuilder) IssuancePeriod(issuancePeriod string) *RecurringPaymentBuilder {
	builder.issuancePeriod = issuancePeriod
	builder.issuancePeriodFlag = true
	return builder
}

// 币种id
//
// 示例值：6863329932261459464
func (builder *RecurringPaymentBuilder) CurrencyId(currencyId string) *RecurringPaymentBuilder {
	builder.currencyId = currencyId
	builder.currencyIdFlag = true
	return builder
}

// 备注
//
// 示例值：这是个备注
func (builder *RecurringPaymentBuilder) Remark(remark string) *RecurringPaymentBuilder {
	builder.remark = remark
	builder.remarkFlag = true
	return builder
}

func (builder *RecurringPaymentBuilder) Build() *RecurringPayment {
	req := &RecurringPayment{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.uniqueIdFlag {
		req.UniqueId = &builder.uniqueId

	}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.itemIdFlag {
		req.ItemId = &builder.itemId

	}
	if builder.issuanceTypeFlag {
		req.IssuanceType = &builder.issuanceType

	}
	if builder.eachAmountFlag {
		req.EachAmount = &builder.eachAmount

	}
	if builder.startDateFlag {
		req.StartDate = &builder.startDate

	}
	if builder.endDateFlag {
		req.EndDate = &builder.endDate

	}
	if builder.issuancePeriodFlag {
		req.IssuancePeriod = &builder.issuancePeriod

	}
	if builder.currencyIdFlag {
		req.CurrencyId = &builder.currencyId

	}
	if builder.remarkFlag {
		req.Remark = &builder.remark

	}
	return req
}

type RecurringPaymentForCreate struct {
	UniqueId *string `json:"unique_id,omitempty"` // 外部幂等id，由上游业务决定

	UserId *string `json:"user_id,omitempty"` // 员工id，具体类型由入参中的 user_id_type 指定

	ItemId *string `json:"item_id,omitempty"` // 薪酬项id（可通过 https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/compensation-v1/item/list?appId=cli_a3077e2bb03c100d 进行查询）

	EachAmount *string `json:"each_amount,omitempty"` // 每次发放金额

	StartDate *string `json:"start_date,omitempty"` // 发放开始时间

	EndDate *string `json:"end_date,omitempty"` // 发放结束时间

	CurrencyId *string `json:"currency_id,omitempty"` // 币种id

	IssuanceType *string `json:"issuance_type,omitempty"` // 发放方式

	IssuancePeriod *string `json:"issuance_period,omitempty"` // 发放频率

	Remark *string `json:"remark,omitempty"` // 备注
}

type RecurringPaymentForCreateBuilder struct {
	uniqueId     string // 外部幂等id，由上游业务决定
	uniqueIdFlag bool

	userId     string // 员工id，具体类型由入参中的 user_id_type 指定
	userIdFlag bool

	itemId     string // 薪酬项id（可通过 https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/compensation-v1/item/list?appId=cli_a3077e2bb03c100d 进行查询）
	itemIdFlag bool

	eachAmount     string // 每次发放金额
	eachAmountFlag bool

	startDate     string // 发放开始时间
	startDateFlag bool

	endDate     string // 发放结束时间
	endDateFlag bool

	currencyId     string // 币种id
	currencyIdFlag bool

	issuanceType     string // 发放方式
	issuanceTypeFlag bool

	issuancePeriod     string // 发放频率
	issuancePeriodFlag bool

	remark     string // 备注
	remarkFlag bool
}

func NewRecurringPaymentForCreateBuilder() *RecurringPaymentForCreateBuilder {
	builder := &RecurringPaymentForCreateBuilder{}
	return builder
}

// 外部幂等id，由上游业务决定
//
// 示例值：7402510801304718380_7309316347007764012_7402523725868058156_1726070400000_10000
func (builder *RecurringPaymentForCreateBuilder) UniqueId(uniqueId string) *RecurringPaymentForCreateBuilder {
	builder.uniqueId = uniqueId
	builder.uniqueIdFlag = true
	return builder
}

// 员工id，具体类型由入参中的 user_id_type 指定
//
// 示例值：7337149697626801708
func (builder *RecurringPaymentForCreateBuilder) UserId(userId string) *RecurringPaymentForCreateBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}

// 薪酬项id（可通过 https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/compensation-v1/item/list?appId=cli_a3077e2bb03c100d 进行查询）
//
// 示例值：7411039006180312620
func (builder *RecurringPaymentForCreateBuilder) ItemId(itemId string) *RecurringPaymentForCreateBuilder {
	builder.itemId = itemId
	builder.itemIdFlag = true
	return builder
}

// 每次发放金额
//
// 示例值：20.00
func (builder *RecurringPaymentForCreateBuilder) EachAmount(eachAmount string) *RecurringPaymentForCreateBuilder {
	builder.eachAmount = eachAmount
	builder.eachAmountFlag = true
	return builder
}

// 发放开始时间
//
// 示例值：2024-08-01
func (builder *RecurringPaymentForCreateBuilder) StartDate(startDate string) *RecurringPaymentForCreateBuilder {
	builder.startDate = startDate
	builder.startDateFlag = true
	return builder
}

// 发放结束时间
//
// 示例值：2025-08-01
func (builder *RecurringPaymentForCreateBuilder) EndDate(endDate string) *RecurringPaymentForCreateBuilder {
	builder.endDate = endDate
	builder.endDateFlag = true
	return builder
}

// 币种id
//
// 示例值：6863329932261459464
func (builder *RecurringPaymentForCreateBuilder) CurrencyId(currencyId string) *RecurringPaymentForCreateBuilder {
	builder.currencyId = currencyId
	builder.currencyIdFlag = true
	return builder
}

// 发放方式
//
// 示例值：with_salary
func (builder *RecurringPaymentForCreateBuilder) IssuanceType(issuanceType string) *RecurringPaymentForCreateBuilder {
	builder.issuanceType = issuanceType
	builder.issuanceTypeFlag = true
	return builder
}

// 发放频率
//
// 示例值：year
func (builder *RecurringPaymentForCreateBuilder) IssuancePeriod(issuancePeriod string) *RecurringPaymentForCreateBuilder {
	builder.issuancePeriod = issuancePeriod
	builder.issuancePeriodFlag = true
	return builder
}

// 备注
//
// 示例值：这是个备注
func (builder *RecurringPaymentForCreateBuilder) Remark(remark string) *RecurringPaymentForCreateBuilder {
	builder.remark = remark
	builder.remarkFlag = true
	return builder
}

func (builder *RecurringPaymentForCreateBuilder) Build() *RecurringPaymentForCreate {
	req := &RecurringPaymentForCreate{}
	if builder.uniqueIdFlag {
		req.UniqueId = &builder.uniqueId

	}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.itemIdFlag {
		req.ItemId = &builder.itemId

	}
	if builder.eachAmountFlag {
		req.EachAmount = &builder.eachAmount

	}
	if builder.startDateFlag {
		req.StartDate = &builder.startDate

	}
	if builder.endDateFlag {
		req.EndDate = &builder.endDate

	}
	if builder.currencyIdFlag {
		req.CurrencyId = &builder.currencyId

	}
	if builder.issuanceTypeFlag {
		req.IssuanceType = &builder.issuanceType

	}
	if builder.issuancePeriodFlag {
		req.IssuancePeriod = &builder.issuancePeriod

	}
	if builder.remarkFlag {
		req.Remark = &builder.remark

	}
	return req
}

type RecurringPaymentForUpdate struct {
	Id *string `json:"id,omitempty"` // 经常性支付记录id

	EachAmount *string `json:"each_amount,omitempty"` // 每次发放金额

	StartDate *string `json:"start_date,omitempty"` // 发放开始时间

	EndDate *string `json:"end_date,omitempty"` // 发放结束时间

	CurrencyId *string `json:"currency_id,omitempty"` // 币种id

	IssuanceType *string `json:"issuance_type,omitempty"` // 发放方式

	Remark *string `json:"remark,omitempty"` // 原因
}

type RecurringPaymentForUpdateBuilder struct {
	id     string // 经常性支付记录id
	idFlag bool

	eachAmount     string // 每次发放金额
	eachAmountFlag bool

	startDate     string // 发放开始时间
	startDateFlag bool

	endDate     string // 发放结束时间
	endDateFlag bool

	currencyId     string // 币种id
	currencyIdFlag bool

	issuanceType     string // 发放方式
	issuanceTypeFlag bool

	remark     string // 原因
	remarkFlag bool
}

func NewRecurringPaymentForUpdateBuilder() *RecurringPaymentForUpdateBuilder {
	builder := &RecurringPaymentForUpdateBuilder{}
	return builder
}

// 经常性支付记录id
//
// 示例值：7397033607132351532
func (builder *RecurringPaymentForUpdateBuilder) Id(id string) *RecurringPaymentForUpdateBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 每次发放金额
//
// 示例值：10.00
func (builder *RecurringPaymentForUpdateBuilder) EachAmount(eachAmount string) *RecurringPaymentForUpdateBuilder {
	builder.eachAmount = eachAmount
	builder.eachAmountFlag = true
	return builder
}

// 发放开始时间
//
// 示例值：2024-10-20
func (builder *RecurringPaymentForUpdateBuilder) StartDate(startDate string) *RecurringPaymentForUpdateBuilder {
	builder.startDate = startDate
	builder.startDateFlag = true
	return builder
}

// 发放结束时间
//
// 示例值：2025-03-20
func (builder *RecurringPaymentForUpdateBuilder) EndDate(endDate string) *RecurringPaymentForUpdateBuilder {
	builder.endDate = endDate
	builder.endDateFlag = true
	return builder
}

// 币种id
//
// 示例值：6863329932261459464
func (builder *RecurringPaymentForUpdateBuilder) CurrencyId(currencyId string) *RecurringPaymentForUpdateBuilder {
	builder.currencyId = currencyId
	builder.currencyIdFlag = true
	return builder
}

// 发放方式
//
// 示例值：with_salary
func (builder *RecurringPaymentForUpdateBuilder) IssuanceType(issuanceType string) *RecurringPaymentForUpdateBuilder {
	builder.issuanceType = issuanceType
	builder.issuanceTypeFlag = true
	return builder
}

// 原因
//
// 示例值：这是个备注
func (builder *RecurringPaymentForUpdateBuilder) Remark(remark string) *RecurringPaymentForUpdateBuilder {
	builder.remark = remark
	builder.remarkFlag = true
	return builder
}

func (builder *RecurringPaymentForUpdateBuilder) Build() *RecurringPaymentForUpdate {
	req := &RecurringPaymentForUpdate{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.eachAmountFlag {
		req.EachAmount = &builder.eachAmount

	}
	if builder.startDateFlag {
		req.StartDate = &builder.startDate

	}
	if builder.endDateFlag {
		req.EndDate = &builder.endDate

	}
	if builder.currencyIdFlag {
		req.CurrencyId = &builder.currencyId

	}
	if builder.issuanceTypeFlag {
		req.IssuanceType = &builder.issuanceType

	}
	if builder.remarkFlag {
		req.Remark = &builder.remark

	}
	return req
}

type RecurringPaymentOperateResult struct {
	Id *string `json:"id,omitempty"` // 操作记录的id

	UniqueId *string `json:"unique_id,omitempty"` // 操作的记录的 unique_id

	Code *int `json:"code,omitempty"` // 操作结果状态码

	Message *string `json:"message,omitempty"` // 操作结果描述
}

type RecurringPaymentOperateResultBuilder struct {
	id     string // 操作记录的id
	idFlag bool

	uniqueId     string // 操作的记录的 unique_id
	uniqueIdFlag bool

	code     int // 操作结果状态码
	codeFlag bool

	message     string // 操作结果描述
	messageFlag bool
}

func NewRecurringPaymentOperateResultBuilder() *RecurringPaymentOperateResultBuilder {
	builder := &RecurringPaymentOperateResultBuilder{}
	return builder
}

// 操作记录的id
//
// 示例值：7390583861280556588
func (builder *RecurringPaymentOperateResultBuilder) Id(id string) *RecurringPaymentOperateResultBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 操作的记录的 unique_id
//
// 示例值：7390583861280556588
func (builder *RecurringPaymentOperateResultBuilder) UniqueId(uniqueId string) *RecurringPaymentOperateResultBuilder {
	builder.uniqueId = uniqueId
	builder.uniqueIdFlag = true
	return builder
}

// 操作结果状态码
//
// 示例值：21270202
func (builder *RecurringPaymentOperateResultBuilder) Code(code int) *RecurringPaymentOperateResultBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}

// 操作结果描述
//
// 示例值：uqniue id conflict
func (builder *RecurringPaymentOperateResultBuilder) Message(message string) *RecurringPaymentOperateResultBuilder {
	builder.message = message
	builder.messageFlag = true
	return builder
}

func (builder *RecurringPaymentOperateResultBuilder) Build() *RecurringPaymentOperateResult {
	req := &RecurringPaymentOperateResult{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.uniqueIdFlag {
		req.UniqueId = &builder.uniqueId

	}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	if builder.messageFlag {
		req.Message = &builder.message

	}
	return req
}

type SocialArchive struct {
	UserId *string `json:"user_id,omitempty"` // 员工ID

	Details []*SocialArchiveDetail `json:"details,omitempty"` // 员工参保档案，包含社保、公积金档案
}

type SocialArchiveBuilder struct {
	userId     string // 员工ID
	userIdFlag bool

	details     []*SocialArchiveDetail // 员工参保档案，包含社保、公积金档案
	detailsFlag bool
}

func NewSocialArchiveBuilder() *SocialArchiveBuilder {
	builder := &SocialArchiveBuilder{}
	return builder
}

// 员工ID
//
// 示例值：
func (builder *SocialArchiveBuilder) UserId(userId string) *SocialArchiveBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}

// 员工参保档案，包含社保、公积金档案
//
// 示例值：
func (builder *SocialArchiveBuilder) Details(details []*SocialArchiveDetail) *SocialArchiveBuilder {
	builder.details = details
	builder.detailsFlag = true
	return builder
}

func (builder *SocialArchiveBuilder) Build() *SocialArchive {
	req := &SocialArchive{}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.detailsFlag {
		req.Details = builder.details
	}
	return req
}

type SocialArchiveAdjustRecord struct {
	UserId *string `json:"user_id,omitempty"` // 员工ID

	RecordType *string `json:"record_type,omitempty"` // 类型，increase: 增员; attrition: 减员

	Details []*SocialArchiveDetail `json:"details,omitempty"` // 员工增减员记录，包括社保、公积金记录
}

type SocialArchiveAdjustRecordBuilder struct {
	userId     string // 员工ID
	userIdFlag bool

	recordType     string // 类型，increase: 增员; attrition: 减员
	recordTypeFlag bool

	details     []*SocialArchiveDetail // 员工增减员记录，包括社保、公积金记录
	detailsFlag bool
}

func NewSocialArchiveAdjustRecordBuilder() *SocialArchiveAdjustRecordBuilder {
	builder := &SocialArchiveAdjustRecordBuilder{}
	return builder
}

// 员工ID
//
// 示例值：
func (builder *SocialArchiveAdjustRecordBuilder) UserId(userId string) *SocialArchiveAdjustRecordBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}

// 类型，increase: 增员; attrition: 减员
//
// 示例值：increase
func (builder *SocialArchiveAdjustRecordBuilder) RecordType(recordType string) *SocialArchiveAdjustRecordBuilder {
	builder.recordType = recordType
	builder.recordTypeFlag = true
	return builder
}

// 员工增减员记录，包括社保、公积金记录
//
// 示例值：
func (builder *SocialArchiveAdjustRecordBuilder) Details(details []*SocialArchiveDetail) *SocialArchiveAdjustRecordBuilder {
	builder.details = details
	builder.detailsFlag = true
	return builder
}

func (builder *SocialArchiveAdjustRecordBuilder) Build() *SocialArchiveAdjustRecord {
	req := &SocialArchiveAdjustRecord{}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.recordTypeFlag {
		req.RecordType = &builder.recordType

	}
	if builder.detailsFlag {
		req.Details = builder.details
	}
	return req
}

type SocialArchiveDetail struct {
	Description *I18n `json:"description,omitempty"` // 调整说明

	InsuranceType *string `json:"insurance_type,omitempty"` // 类型。social_insurance: 社保; provident_fund: 公积金

	InsuranceStatus *string `json:"insurance_status,omitempty"` // 参保状态，非「参保」状态下，基数、险种数据等为空

	Id *string `json:"id,omitempty"` // 档案时间轴对象ID，仅参保档案对象会包含

	Tid *string `json:"tid,omitempty"` // 档案时间轴对象版本ID，仅参保档案对象会包含

	PlanId *string `json:"plan_id,omitempty"` // 参保方案ID，详细信息可通过「查询参保方案」接口获取

	PlanTid *string `json:"plan_tid,omitempty"` // 参保方案版本ID

	LocationId *string `json:"location_id,omitempty"` // 参保城市ID，可通过获取地点信息接口查询详细信息

	CompanyId *string `json:"company_id,omitempty"` // 社保缴纳主体ID，可通过获取公司主体接口查询详细信息

	AccountType *string `json:"account_type,omitempty"` // 社保账户类型

	InsuranceAccount *string `json:"insurance_account,omitempty"` // 社保账号

	BaseSalary *string `json:"base_salary,omitempty"` // 申报缴纳基数

	InsuranceDetails []*SocialArchiveItem `json:"insurance_details,omitempty"` // 险种数据详情

	EffectiveDate *string `json:"effective_date,omitempty"` // 档案生效时间，HHHH-MM-DD
}

type SocialArchiveDetailBuilder struct {
	description     *I18n // 调整说明
	descriptionFlag bool

	insuranceType     string // 类型。social_insurance: 社保; provident_fund: 公积金
	insuranceTypeFlag bool

	insuranceStatus     string // 参保状态，非「参保」状态下，基数、险种数据等为空
	insuranceStatusFlag bool

	id     string // 档案时间轴对象ID，仅参保档案对象会包含
	idFlag bool

	tid     string // 档案时间轴对象版本ID，仅参保档案对象会包含
	tidFlag bool

	planId     string // 参保方案ID，详细信息可通过「查询参保方案」接口获取
	planIdFlag bool

	planTid     string // 参保方案版本ID
	planTidFlag bool

	locationId     string // 参保城市ID，可通过获取地点信息接口查询详细信息
	locationIdFlag bool

	companyId     string // 社保缴纳主体ID，可通过获取公司主体接口查询详细信息
	companyIdFlag bool

	accountType     string // 社保账户类型
	accountTypeFlag bool

	insuranceAccount     string // 社保账号
	insuranceAccountFlag bool

	baseSalary     string // 申报缴纳基数
	baseSalaryFlag bool

	insuranceDetails     []*SocialArchiveItem // 险种数据详情
	insuranceDetailsFlag bool

	effectiveDate     string // 档案生效时间，HHHH-MM-DD
	effectiveDateFlag bool
}

func NewSocialArchiveDetailBuilder() *SocialArchiveDetailBuilder {
	builder := &SocialArchiveDetailBuilder{}
	return builder
}

// 调整说明
//
// 示例值：
func (builder *SocialArchiveDetailBuilder) Description(description *I18n) *SocialArchiveDetailBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

// 类型。social_insurance: 社保; provident_fund: 公积金
//
// 示例值：
func (builder *SocialArchiveDetailBuilder) InsuranceType(insuranceType string) *SocialArchiveDetailBuilder {
	builder.insuranceType = insuranceType
	builder.insuranceTypeFlag = true
	return builder
}

// 参保状态，非「参保」状态下，基数、险种数据等为空
//
// 示例值：contribution
func (builder *SocialArchiveDetailBuilder) InsuranceStatus(insuranceStatus string) *SocialArchiveDetailBuilder {
	builder.insuranceStatus = insuranceStatus
	builder.insuranceStatusFlag = true
	return builder
}

// 档案时间轴对象ID，仅参保档案对象会包含
//
// 示例值：123456
func (builder *SocialArchiveDetailBuilder) Id(id string) *SocialArchiveDetailBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 档案时间轴对象版本ID，仅参保档案对象会包含
//
// 示例值：123456
func (builder *SocialArchiveDetailBuilder) Tid(tid string) *SocialArchiveDetailBuilder {
	builder.tid = tid
	builder.tidFlag = true
	return builder
}

// 参保方案ID，详细信息可通过「查询参保方案」接口获取
//
// 示例值：123456
func (builder *SocialArchiveDetailBuilder) PlanId(planId string) *SocialArchiveDetailBuilder {
	builder.planId = planId
	builder.planIdFlag = true
	return builder
}

// 参保方案版本ID
//
// 示例值：123456
func (builder *SocialArchiveDetailBuilder) PlanTid(planTid string) *SocialArchiveDetailBuilder {
	builder.planTid = planTid
	builder.planTidFlag = true
	return builder
}

// 参保城市ID，可通过获取地点信息接口查询详细信息
//
// 示例值：123456
func (builder *SocialArchiveDetailBuilder) LocationId(locationId string) *SocialArchiveDetailBuilder {
	builder.locationId = locationId
	builder.locationIdFlag = true
	return builder
}

// 社保缴纳主体ID，可通过获取公司主体接口查询详细信息
//
// 示例值：223456
func (builder *SocialArchiveDetailBuilder) CompanyId(companyId string) *SocialArchiveDetailBuilder {
	builder.companyId = companyId
	builder.companyIdFlag = true
	return builder
}

// 社保账户类型
//
// 示例值：123456
func (builder *SocialArchiveDetailBuilder) AccountType(accountType string) *SocialArchiveDetailBuilder {
	builder.accountType = accountType
	builder.accountTypeFlag = true
	return builder
}

// 社保账号
//
// 示例值：ac123456
func (builder *SocialArchiveDetailBuilder) InsuranceAccount(insuranceAccount string) *SocialArchiveDetailBuilder {
	builder.insuranceAccount = insuranceAccount
	builder.insuranceAccountFlag = true
	return builder
}

// 申报缴纳基数
//
// 示例值：1000.10
func (builder *SocialArchiveDetailBuilder) BaseSalary(baseSalary string) *SocialArchiveDetailBuilder {
	builder.baseSalary = baseSalary
	builder.baseSalaryFlag = true
	return builder
}

// 险种数据详情
//
// 示例值：
func (builder *SocialArchiveDetailBuilder) InsuranceDetails(insuranceDetails []*SocialArchiveItem) *SocialArchiveDetailBuilder {
	builder.insuranceDetails = insuranceDetails
	builder.insuranceDetailsFlag = true
	return builder
}

// 档案生效时间，HHHH-MM-DD
//
// 示例值：2024-01-01
func (builder *SocialArchiveDetailBuilder) EffectiveDate(effectiveDate string) *SocialArchiveDetailBuilder {
	builder.effectiveDate = effectiveDate
	builder.effectiveDateFlag = true
	return builder
}

func (builder *SocialArchiveDetailBuilder) Build() *SocialArchiveDetail {
	req := &SocialArchiveDetail{}
	if builder.descriptionFlag {
		req.Description = builder.description
	}
	if builder.insuranceTypeFlag {
		req.InsuranceType = &builder.insuranceType

	}
	if builder.insuranceStatusFlag {
		req.InsuranceStatus = &builder.insuranceStatus

	}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.tidFlag {
		req.Tid = &builder.tid

	}
	if builder.planIdFlag {
		req.PlanId = &builder.planId

	}
	if builder.planTidFlag {
		req.PlanTid = &builder.planTid

	}
	if builder.locationIdFlag {
		req.LocationId = &builder.locationId

	}
	if builder.companyIdFlag {
		req.CompanyId = &builder.companyId

	}
	if builder.accountTypeFlag {
		req.AccountType = &builder.accountType

	}
	if builder.insuranceAccountFlag {
		req.InsuranceAccount = &builder.insuranceAccount

	}
	if builder.baseSalaryFlag {
		req.BaseSalary = &builder.baseSalary

	}
	if builder.insuranceDetailsFlag {
		req.InsuranceDetails = builder.insuranceDetails
	}
	if builder.effectiveDateFlag {
		req.EffectiveDate = &builder.effectiveDate

	}
	return req
}

type SocialArchiveItem struct {
	InsuranceId *string `json:"insurance_id,omitempty"` // 险种ID，详细信息可通过社保险种接口查询

	InsuranceName *I18n `json:"insurance_name,omitempty"` // 险种名称

	CompanyDeduction *string `json:"company_deduction,omitempty"` // 企业缴纳金额

	CompanySetting *SocialPlanItemSetting `json:"company_setting,omitempty"` // 险种缴纳配置

	PersonalDeduction *string `json:"personal_deduction,omitempty"` // 企业缴纳金额

	PersonalSetting *SocialPlanItemSetting `json:"personal_setting,omitempty"` // 险种缴纳配置

	PaymentFrequency *string `json:"payment_frequency,omitempty"` // 缴纳频率

	PaymentMonths []int `json:"payment_months,omitempty"` // 缴纳月份
}

type SocialArchiveItemBuilder struct {
	insuranceId     string // 险种ID，详细信息可通过社保险种接口查询
	insuranceIdFlag bool

	insuranceName     *I18n // 险种名称
	insuranceNameFlag bool

	companyDeduction     string // 企业缴纳金额
	companyDeductionFlag bool

	companySetting     *SocialPlanItemSetting // 险种缴纳配置
	companySettingFlag bool

	personalDeduction     string // 企业缴纳金额
	personalDeductionFlag bool

	personalSetting     *SocialPlanItemSetting // 险种缴纳配置
	personalSettingFlag bool

	paymentFrequency     string // 缴纳频率
	paymentFrequencyFlag bool

	paymentMonths     []int // 缴纳月份
	paymentMonthsFlag bool
}

func NewSocialArchiveItemBuilder() *SocialArchiveItemBuilder {
	builder := &SocialArchiveItemBuilder{}
	return builder
}

// 险种ID，详细信息可通过社保险种接口查询
//
// 示例值：111223
func (builder *SocialArchiveItemBuilder) InsuranceId(insuranceId string) *SocialArchiveItemBuilder {
	builder.insuranceId = insuranceId
	builder.insuranceIdFlag = true
	return builder
}

// 险种名称
//
// 示例值：
func (builder *SocialArchiveItemBuilder) InsuranceName(insuranceName *I18n) *SocialArchiveItemBuilder {
	builder.insuranceName = insuranceName
	builder.insuranceNameFlag = true
	return builder
}

// 企业缴纳金额
//
// 示例值：2000.20
func (builder *SocialArchiveItemBuilder) CompanyDeduction(companyDeduction string) *SocialArchiveItemBuilder {
	builder.companyDeduction = companyDeduction
	builder.companyDeductionFlag = true
	return builder
}

// 险种缴纳配置
//
// 示例值：
func (builder *SocialArchiveItemBuilder) CompanySetting(companySetting *SocialPlanItemSetting) *SocialArchiveItemBuilder {
	builder.companySetting = companySetting
	builder.companySettingFlag = true
	return builder
}

// 企业缴纳金额
//
// 示例值：1000.20
func (builder *SocialArchiveItemBuilder) PersonalDeduction(personalDeduction string) *SocialArchiveItemBuilder {
	builder.personalDeduction = personalDeduction
	builder.personalDeductionFlag = true
	return builder
}

// 险种缴纳配置
//
// 示例值：
func (builder *SocialArchiveItemBuilder) PersonalSetting(personalSetting *SocialPlanItemSetting) *SocialArchiveItemBuilder {
	builder.personalSetting = personalSetting
	builder.personalSettingFlag = true
	return builder
}

// 缴纳频率
//
// 示例值：8.00
func (builder *SocialArchiveItemBuilder) PaymentFrequency(paymentFrequency string) *SocialArchiveItemBuilder {
	builder.paymentFrequency = paymentFrequency
	builder.paymentFrequencyFlag = true
	return builder
}

// 缴纳月份
//
// 示例值：
func (builder *SocialArchiveItemBuilder) PaymentMonths(paymentMonths []int) *SocialArchiveItemBuilder {
	builder.paymentMonths = paymentMonths
	builder.paymentMonthsFlag = true
	return builder
}

func (builder *SocialArchiveItemBuilder) Build() *SocialArchiveItem {
	req := &SocialArchiveItem{}
	if builder.insuranceIdFlag {
		req.InsuranceId = &builder.insuranceId

	}
	if builder.insuranceNameFlag {
		req.InsuranceName = builder.insuranceName
	}
	if builder.companyDeductionFlag {
		req.CompanyDeduction = &builder.companyDeduction

	}
	if builder.companySettingFlag {
		req.CompanySetting = builder.companySetting
	}
	if builder.personalDeductionFlag {
		req.PersonalDeduction = &builder.personalDeduction

	}
	if builder.personalSettingFlag {
		req.PersonalSetting = builder.personalSetting
	}
	if builder.paymentFrequencyFlag {
		req.PaymentFrequency = &builder.paymentFrequency

	}
	if builder.paymentMonthsFlag {
		req.PaymentMonths = builder.paymentMonths
	}
	return req
}

type SocialInsurance struct {
	Id *string `json:"id,omitempty"` // 险种唯一ID

	Name *I18n `json:"name,omitempty"` // 险种名称

	InsuranceType *string `json:"insurance_type,omitempty"` // 险种类型. social_insurance: 社保; provident_fund: 公积金

	Active *bool `json:"active,omitempty"` // 启用状态

	IsSystem *bool `json:"is_system,omitempty"` // 是否为系统预置险种。养老保险、医疗保险、失业保险、工伤保险、生育保险、住房公积金为系统预置险种。
}

type SocialInsuranceBuilder struct {
	id     string // 险种唯一ID
	idFlag bool

	name     *I18n // 险种名称
	nameFlag bool

	insuranceType     string // 险种类型. social_insurance: 社保; provident_fund: 公积金
	insuranceTypeFlag bool

	active     bool // 启用状态
	activeFlag bool

	isSystem     bool // 是否为系统预置险种。养老保险、医疗保险、失业保险、工伤保险、生育保险、住房公积金为系统预置险种。
	isSystemFlag bool
}

func NewSocialInsuranceBuilder() *SocialInsuranceBuilder {
	builder := &SocialInsuranceBuilder{}
	return builder
}

// 险种唯一ID
//
// 示例值：i12345
func (builder *SocialInsuranceBuilder) Id(id string) *SocialInsuranceBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 险种名称
//
// 示例值：
func (builder *SocialInsuranceBuilder) Name(name *I18n) *SocialInsuranceBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 险种类型. social_insurance: 社保; provident_fund: 公积金
//
// 示例值：true
func (builder *SocialInsuranceBuilder) InsuranceType(insuranceType string) *SocialInsuranceBuilder {
	builder.insuranceType = insuranceType
	builder.insuranceTypeFlag = true
	return builder
}

// 启用状态
//
// 示例值：
func (builder *SocialInsuranceBuilder) Active(active bool) *SocialInsuranceBuilder {
	builder.active = active
	builder.activeFlag = true
	return builder
}

// 是否为系统预置险种。养老保险、医疗保险、失业保险、工伤保险、生育保险、住房公积金为系统预置险种。
//
// 示例值：
func (builder *SocialInsuranceBuilder) IsSystem(isSystem bool) *SocialInsuranceBuilder {
	builder.isSystem = isSystem
	builder.isSystemFlag = true
	return builder
}

func (builder *SocialInsuranceBuilder) Build() *SocialInsurance {
	req := &SocialInsurance{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.insuranceTypeFlag {
		req.InsuranceType = &builder.insuranceType

	}
	if builder.activeFlag {
		req.Active = &builder.active

	}
	if builder.isSystemFlag {
		req.IsSystem = &builder.isSystem

	}
	return req
}

type SocialPlan struct {
	PlanId *string `json:"plan_id,omitempty"` // 参保方案ID

	PlanTid *string `json:"plan_tid,omitempty"` // 参保方案版本ID

	Name *I18n `json:"name,omitempty"` // 参保方案名称

	EffectiveDate *string `json:"effective_date,omitempty"` // 生效时间，HHHH-MM-DD

	Active *bool `json:"active,omitempty"` // 是否启用

	InsuranceType *string `json:"insurance_type,omitempty"` // 险种类型. social_insurance: 社保; provident_fund: 公积金

	Scope *SocialPlanScope `json:"scope,omitempty"` // 参保方案适用范围

	ItemDetail []*SocialPlanItemDetail `json:"item_detail,omitempty"` // 参保信息

	Remark *I18n `json:"remark,omitempty"` // 备注
}

type SocialPlanBuilder struct {
	planId     string // 参保方案ID
	planIdFlag bool

	planTid     string // 参保方案版本ID
	planTidFlag bool

	name     *I18n // 参保方案名称
	nameFlag bool

	effectiveDate     string // 生效时间，HHHH-MM-DD
	effectiveDateFlag bool

	active     bool // 是否启用
	activeFlag bool

	insuranceType     string // 险种类型. social_insurance: 社保; provident_fund: 公积金
	insuranceTypeFlag bool

	scope     *SocialPlanScope // 参保方案适用范围
	scopeFlag bool

	itemDetail     []*SocialPlanItemDetail // 参保信息
	itemDetailFlag bool

	remark     *I18n // 备注
	remarkFlag bool
}

func NewSocialPlanBuilder() *SocialPlanBuilder {
	builder := &SocialPlanBuilder{}
	return builder
}

// 参保方案ID
//
// 示例值：11111
func (builder *SocialPlanBuilder) PlanId(planId string) *SocialPlanBuilder {
	builder.planId = planId
	builder.planIdFlag = true
	return builder
}

// 参保方案版本ID
//
// 示例值：22222
func (builder *SocialPlanBuilder) PlanTid(planTid string) *SocialPlanBuilder {
	builder.planTid = planTid
	builder.planTidFlag = true
	return builder
}

// 参保方案名称
//
// 示例值：
func (builder *SocialPlanBuilder) Name(name *I18n) *SocialPlanBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 生效时间，HHHH-MM-DD
//
// 示例值：2024-01-01
func (builder *SocialPlanBuilder) EffectiveDate(effectiveDate string) *SocialPlanBuilder {
	builder.effectiveDate = effectiveDate
	builder.effectiveDateFlag = true
	return builder
}

// 是否启用
//
// 示例值：
func (builder *SocialPlanBuilder) Active(active bool) *SocialPlanBuilder {
	builder.active = active
	builder.activeFlag = true
	return builder
}

// 险种类型. social_insurance: 社保; provident_fund: 公积金
//
// 示例值：
func (builder *SocialPlanBuilder) InsuranceType(insuranceType string) *SocialPlanBuilder {
	builder.insuranceType = insuranceType
	builder.insuranceTypeFlag = true
	return builder
}

// 参保方案适用范围
//
// 示例值：
func (builder *SocialPlanBuilder) Scope(scope *SocialPlanScope) *SocialPlanBuilder {
	builder.scope = scope
	builder.scopeFlag = true
	return builder
}

// 参保信息
//
// 示例值：
func (builder *SocialPlanBuilder) ItemDetail(itemDetail []*SocialPlanItemDetail) *SocialPlanBuilder {
	builder.itemDetail = itemDetail
	builder.itemDetailFlag = true
	return builder
}

// 备注
//
// 示例值：
func (builder *SocialPlanBuilder) Remark(remark *I18n) *SocialPlanBuilder {
	builder.remark = remark
	builder.remarkFlag = true
	return builder
}

func (builder *SocialPlanBuilder) Build() *SocialPlan {
	req := &SocialPlan{}
	if builder.planIdFlag {
		req.PlanId = &builder.planId

	}
	if builder.planTidFlag {
		req.PlanTid = &builder.planTid

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.effectiveDateFlag {
		req.EffectiveDate = &builder.effectiveDate

	}
	if builder.activeFlag {
		req.Active = &builder.active

	}
	if builder.insuranceTypeFlag {
		req.InsuranceType = &builder.insuranceType

	}
	if builder.scopeFlag {
		req.Scope = builder.scope
	}
	if builder.itemDetailFlag {
		req.ItemDetail = builder.itemDetail
	}
	if builder.remarkFlag {
		req.Remark = builder.remark
	}
	return req
}

type SocialPlanCondition struct {
	LeftType *int `json:"left_type,omitempty"` // 适用范围左值

	Operator *int `json:"operator,omitempty"` // 适用范围操作

	RightValues []string `json:"right_values,omitempty"` // 适用范围右值
}

type SocialPlanConditionBuilder struct {
	leftType     int // 适用范围左值
	leftTypeFlag bool

	operator     int // 适用范围操作
	operatorFlag bool

	rightValues     []string // 适用范围右值
	rightValuesFlag bool
}

func NewSocialPlanConditionBuilder() *SocialPlanConditionBuilder {
	builder := &SocialPlanConditionBuilder{}
	return builder
}

// 适用范围左值
//
// 示例值：1
func (builder *SocialPlanConditionBuilder) LeftType(leftType int) *SocialPlanConditionBuilder {
	builder.leftType = leftType
	builder.leftTypeFlag = true
	return builder
}

// 适用范围操作
//
// 示例值：1
func (builder *SocialPlanConditionBuilder) Operator(operator int) *SocialPlanConditionBuilder {
	builder.operator = operator
	builder.operatorFlag = true
	return builder
}

// 适用范围右值
//
// 示例值：
func (builder *SocialPlanConditionBuilder) RightValues(rightValues []string) *SocialPlanConditionBuilder {
	builder.rightValues = rightValues
	builder.rightValuesFlag = true
	return builder
}

func (builder *SocialPlanConditionBuilder) Build() *SocialPlanCondition {
	req := &SocialPlanCondition{}
	if builder.leftTypeFlag {
		req.LeftType = &builder.leftType

	}
	if builder.operatorFlag {
		req.Operator = &builder.operator

	}
	if builder.rightValuesFlag {
		req.RightValues = builder.rightValues
	}
	return req
}

type SocialPlanItemDetail struct {
	ItemId *string `json:"item_id,omitempty"` // 险种ID，详细信息可通过社保险种接口查询

	ItemName *I18n `json:"item_name,omitempty"` // 险种名

	ItemSettingOfPerson *SocialPlanItemSetting `json:"item_setting_of_person,omitempty"` // 险种缴纳配置

	ItemSettingOfCompany *SocialPlanItemSetting `json:"item_setting_of_company,omitempty"` // 险种缴纳配置

	PaymentFrequency *string `json:"payment_frequency,omitempty"` // 缴纳频率

	PaymentMonths []int `json:"payment_months,omitempty"` // 缴纳月份
}

type SocialPlanItemDetailBuilder struct {
	itemId     string // 险种ID，详细信息可通过社保险种接口查询
	itemIdFlag bool

	itemName     *I18n // 险种名
	itemNameFlag bool

	itemSettingOfPerson     *SocialPlanItemSetting // 险种缴纳配置
	itemSettingOfPersonFlag bool

	itemSettingOfCompany     *SocialPlanItemSetting // 险种缴纳配置
	itemSettingOfCompanyFlag bool

	paymentFrequency     string // 缴纳频率
	paymentFrequencyFlag bool

	paymentMonths     []int // 缴纳月份
	paymentMonthsFlag bool
}

func NewSocialPlanItemDetailBuilder() *SocialPlanItemDetailBuilder {
	builder := &SocialPlanItemDetailBuilder{}
	return builder
}

// 险种ID，详细信息可通过社保险种接口查询
//
// 示例值：123456
func (builder *SocialPlanItemDetailBuilder) ItemId(itemId string) *SocialPlanItemDetailBuilder {
	builder.itemId = itemId
	builder.itemIdFlag = true
	return builder
}

// 险种名
//
// 示例值：
func (builder *SocialPlanItemDetailBuilder) ItemName(itemName *I18n) *SocialPlanItemDetailBuilder {
	builder.itemName = itemName
	builder.itemNameFlag = true
	return builder
}

// 险种缴纳配置
//
// 示例值：
func (builder *SocialPlanItemDetailBuilder) ItemSettingOfPerson(itemSettingOfPerson *SocialPlanItemSetting) *SocialPlanItemDetailBuilder {
	builder.itemSettingOfPerson = itemSettingOfPerson
	builder.itemSettingOfPersonFlag = true
	return builder
}

// 险种缴纳配置
//
// 示例值：
func (builder *SocialPlanItemDetailBuilder) ItemSettingOfCompany(itemSettingOfCompany *SocialPlanItemSetting) *SocialPlanItemDetailBuilder {
	builder.itemSettingOfCompany = itemSettingOfCompany
	builder.itemSettingOfCompanyFlag = true
	return builder
}

// 缴纳频率
//
// 示例值：8.00
func (builder *SocialPlanItemDetailBuilder) PaymentFrequency(paymentFrequency string) *SocialPlanItemDetailBuilder {
	builder.paymentFrequency = paymentFrequency
	builder.paymentFrequencyFlag = true
	return builder
}

// 缴纳月份
//
// 示例值：
func (builder *SocialPlanItemDetailBuilder) PaymentMonths(paymentMonths []int) *SocialPlanItemDetailBuilder {
	builder.paymentMonths = paymentMonths
	builder.paymentMonthsFlag = true
	return builder
}

func (builder *SocialPlanItemDetailBuilder) Build() *SocialPlanItemDetail {
	req := &SocialPlanItemDetail{}
	if builder.itemIdFlag {
		req.ItemId = &builder.itemId

	}
	if builder.itemNameFlag {
		req.ItemName = builder.itemName
	}
	if builder.itemSettingOfPersonFlag {
		req.ItemSettingOfPerson = builder.itemSettingOfPerson
	}
	if builder.itemSettingOfCompanyFlag {
		req.ItemSettingOfCompany = builder.itemSettingOfCompany
	}
	if builder.paymentFrequencyFlag {
		req.PaymentFrequency = &builder.paymentFrequency

	}
	if builder.paymentMonthsFlag {
		req.PaymentMonths = builder.paymentMonths
	}
	return req
}

type SocialPlanItemSetting struct {
	LowerLimit *string `json:"lower_limit,omitempty"` // 基数下限，浮点数，保留二位小数

	UpperLimit *string `json:"upper_limit,omitempty"` // 基数上限，浮点数，保留二位小数

	PaymentRatio *string `json:"payment_ratio,omitempty"` // 缴纳比例，浮点数，默认填充到二位小数，支持输入到四位，单位为 %

	PaymentRoundingRule *string `json:"payment_rounding_rule,omitempty"` // 缴纳金舍入规则。rounding: 四舍五入; round_up: 向上舍入; round_down: 向下舍入

	PaymentDecimals *int `json:"payment_decimals,omitempty"` // 缴纳金小数位数，0-6之间选择

	FixedPayment *string `json:"fixed_payment,omitempty"` // 附加固定金额，浮点数，保留二位小数
}

type SocialPlanItemSettingBuilder struct {
	lowerLimit     string // 基数下限，浮点数，保留二位小数
	lowerLimitFlag bool

	upperLimit     string // 基数上限，浮点数，保留二位小数
	upperLimitFlag bool

	paymentRatio     string // 缴纳比例，浮点数，默认填充到二位小数，支持输入到四位，单位为 %
	paymentRatioFlag bool

	paymentRoundingRule     string // 缴纳金舍入规则。rounding: 四舍五入; round_up: 向上舍入; round_down: 向下舍入
	paymentRoundingRuleFlag bool

	paymentDecimals     int // 缴纳金小数位数，0-6之间选择
	paymentDecimalsFlag bool

	fixedPayment     string // 附加固定金额，浮点数，保留二位小数
	fixedPaymentFlag bool
}

func NewSocialPlanItemSettingBuilder() *SocialPlanItemSettingBuilder {
	builder := &SocialPlanItemSettingBuilder{}
	return builder
}

// 基数下限，浮点数，保留二位小数
//
// 示例值：1000.00
func (builder *SocialPlanItemSettingBuilder) LowerLimit(lowerLimit string) *SocialPlanItemSettingBuilder {
	builder.lowerLimit = lowerLimit
	builder.lowerLimitFlag = true
	return builder
}

// 基数上限，浮点数，保留二位小数
//
// 示例值：2000.00
func (builder *SocialPlanItemSettingBuilder) UpperLimit(upperLimit string) *SocialPlanItemSettingBuilder {
	builder.upperLimit = upperLimit
	builder.upperLimitFlag = true
	return builder
}

// 缴纳比例，浮点数，默认填充到二位小数，支持输入到四位，单位为 %
//
// 示例值：8.00
func (builder *SocialPlanItemSettingBuilder) PaymentRatio(paymentRatio string) *SocialPlanItemSettingBuilder {
	builder.paymentRatio = paymentRatio
	builder.paymentRatioFlag = true
	return builder
}

// 缴纳金舍入规则。rounding: 四舍五入; round_up: 向上舍入; round_down: 向下舍入
//
// 示例值：8.00
func (builder *SocialPlanItemSettingBuilder) PaymentRoundingRule(paymentRoundingRule string) *SocialPlanItemSettingBuilder {
	builder.paymentRoundingRule = paymentRoundingRule
	builder.paymentRoundingRuleFlag = true
	return builder
}

// 缴纳金小数位数，0-6之间选择
//
// 示例值：2
func (builder *SocialPlanItemSettingBuilder) PaymentDecimals(paymentDecimals int) *SocialPlanItemSettingBuilder {
	builder.paymentDecimals = paymentDecimals
	builder.paymentDecimalsFlag = true
	return builder
}

// 附加固定金额，浮点数，保留二位小数
//
// 示例值：200.00
func (builder *SocialPlanItemSettingBuilder) FixedPayment(fixedPayment string) *SocialPlanItemSettingBuilder {
	builder.fixedPayment = fixedPayment
	builder.fixedPaymentFlag = true
	return builder
}

func (builder *SocialPlanItemSettingBuilder) Build() *SocialPlanItemSetting {
	req := &SocialPlanItemSetting{}
	if builder.lowerLimitFlag {
		req.LowerLimit = &builder.lowerLimit

	}
	if builder.upperLimitFlag {
		req.UpperLimit = &builder.upperLimit

	}
	if builder.paymentRatioFlag {
		req.PaymentRatio = &builder.paymentRatio

	}
	if builder.paymentRoundingRuleFlag {
		req.PaymentRoundingRule = &builder.paymentRoundingRule

	}
	if builder.paymentDecimalsFlag {
		req.PaymentDecimals = &builder.paymentDecimals

	}
	if builder.fixedPaymentFlag {
		req.FixedPayment = &builder.fixedPayment

	}
	return req
}

type SocialPlanScope struct {
	IsAll *bool `json:"is_all,omitempty"` // 是否适用于全部

	Rules [][]*SocialPlanCondition `json:"rules,omitempty"` // 适用范围，二维。外层or连接，内层and连接
}

type SocialPlanScopeBuilder struct {
	isAll     bool // 是否适用于全部
	isAllFlag bool

	rules     [][]*SocialPlanCondition // 适用范围，二维。外层or连接，内层and连接
	rulesFlag bool
}

func NewSocialPlanScopeBuilder() *SocialPlanScopeBuilder {
	builder := &SocialPlanScopeBuilder{}
	return builder
}

// 是否适用于全部
//
// 示例值：true
func (builder *SocialPlanScopeBuilder) IsAll(isAll bool) *SocialPlanScopeBuilder {
	builder.isAll = isAll
	builder.isAllFlag = true
	return builder
}

// 适用范围，二维。外层or连接，内层and连接
//
// 示例值：
func (builder *SocialPlanScopeBuilder) Rules(rules [][]*SocialPlanCondition) *SocialPlanScopeBuilder {
	builder.rules = rules
	builder.rulesFlag = true
	return builder
}

func (builder *SocialPlanScopeBuilder) Build() *SocialPlanScope {
	req := &SocialPlanScope{}
	if builder.isAllFlag {
		req.IsAll = &builder.isAll

	}
	if builder.rulesFlag {
		req.Rules = builder.rules
	}
	return req
}

type QueryArchiveReqBodyBuilder struct {
	userIdList     []string // 用户ID列表
	userIdListFlag bool

	tidList     []string // 档案Tid列表
	tidListFlag bool

	effectiveStartDate     string // 生效开始时间
	effectiveStartDateFlag bool

	effectiveEndDate     string // 生效结束时间
	effectiveEndDateFlag bool
}

func NewQueryArchiveReqBodyBuilder() *QueryArchiveReqBodyBuilder {
	builder := &QueryArchiveReqBodyBuilder{}
	return builder
}

// 用户ID列表
//
// 示例值：
func (builder *QueryArchiveReqBodyBuilder) UserIdList(userIdList []string) *QueryArchiveReqBodyBuilder {
	builder.userIdList = userIdList
	builder.userIdListFlag = true
	return builder
}

// 档案Tid列表
//
// 示例值：
func (builder *QueryArchiveReqBodyBuilder) TidList(tidList []string) *QueryArchiveReqBodyBuilder {
	builder.tidList = tidList
	builder.tidListFlag = true
	return builder
}

// 生效开始时间
//
// 示例值：2022-05-10
func (builder *QueryArchiveReqBodyBuilder) EffectiveStartDate(effectiveStartDate string) *QueryArchiveReqBodyBuilder {
	builder.effectiveStartDate = effectiveStartDate
	builder.effectiveStartDateFlag = true
	return builder
}

// 生效结束时间
//
// 示例值：2023-05-15
func (builder *QueryArchiveReqBodyBuilder) EffectiveEndDate(effectiveEndDate string) *QueryArchiveReqBodyBuilder {
	builder.effectiveEndDate = effectiveEndDate
	builder.effectiveEndDateFlag = true
	return builder
}

func (builder *QueryArchiveReqBodyBuilder) Build() *QueryArchiveReqBody {
	req := &QueryArchiveReqBody{}
	if builder.userIdListFlag {
		req.UserIdList = builder.userIdList
	}
	if builder.tidListFlag {
		req.TidList = builder.tidList
	}
	if builder.effectiveStartDateFlag {
		req.EffectiveStartDate = &builder.effectiveStartDate
	}
	if builder.effectiveEndDateFlag {
		req.EffectiveEndDate = &builder.effectiveEndDate
	}
	return req
}

type QueryArchivePathReqBodyBuilder struct {
	userIdList             []string
	userIdListFlag         bool
	tidList                []string
	tidListFlag            bool
	effectiveStartDate     string
	effectiveStartDateFlag bool
	effectiveEndDate       string
	effectiveEndDateFlag   bool
}

func NewQueryArchivePathReqBodyBuilder() *QueryArchivePathReqBodyBuilder {
	builder := &QueryArchivePathReqBodyBuilder{}
	return builder
}

// 用户ID列表
//
// 示例值：
func (builder *QueryArchivePathReqBodyBuilder) UserIdList(userIdList []string) *QueryArchivePathReqBodyBuilder {
	builder.userIdList = userIdList
	builder.userIdListFlag = true
	return builder
}

// 档案Tid列表
//
// 示例值：
func (builder *QueryArchivePathReqBodyBuilder) TidList(tidList []string) *QueryArchivePathReqBodyBuilder {
	builder.tidList = tidList
	builder.tidListFlag = true
	return builder
}

// 生效开始时间
//
// 示例值：2022-05-10
func (builder *QueryArchivePathReqBodyBuilder) EffectiveStartDate(effectiveStartDate string) *QueryArchivePathReqBodyBuilder {
	builder.effectiveStartDate = effectiveStartDate
	builder.effectiveStartDateFlag = true
	return builder
}

// 生效结束时间
//
// 示例值：2023-05-15
func (builder *QueryArchivePathReqBodyBuilder) EffectiveEndDate(effectiveEndDate string) *QueryArchivePathReqBodyBuilder {
	builder.effectiveEndDate = effectiveEndDate
	builder.effectiveEndDateFlag = true
	return builder
}

func (builder *QueryArchivePathReqBodyBuilder) Build() (*QueryArchiveReqBody, error) {
	req := &QueryArchiveReqBody{}
	if builder.userIdListFlag {
		req.UserIdList = builder.userIdList
	}
	if builder.tidListFlag {
		req.TidList = builder.tidList
	}
	if builder.effectiveStartDateFlag {
		req.EffectiveStartDate = &builder.effectiveStartDate
	}
	if builder.effectiveEndDateFlag {
		req.EffectiveEndDate = &builder.effectiveEndDate
	}
	return req, nil
}

type QueryArchiveReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *QueryArchiveReqBody
}

func NewQueryArchiveReqBuilder() *QueryArchiveReqBuilder {
	builder := &QueryArchiveReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 分页大小
//
// 示例值：100
func (builder *QueryArchiveReqBuilder) PageSize(pageSize int) *QueryArchiveReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
//
// 示例值：231432433
func (builder *QueryArchiveReqBuilder) PageToken(pageToken string) *QueryArchiveReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

// 用户ID类型
//
// 示例值：open_id
func (builder *QueryArchiveReqBuilder) UserIdType(userIdType string) *QueryArchiveReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

func (builder *QueryArchiveReqBuilder) Body(body *QueryArchiveReqBody) *QueryArchiveReqBuilder {
	builder.body = body
	return builder
}

func (builder *QueryArchiveReqBuilder) Build() *QueryArchiveReq {
	req := &QueryArchiveReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.body
	return req
}

type QueryArchiveReqBody struct {
	UserIdList []string `json:"user_id_list,omitempty"` // 用户ID列表

	TidList []string `json:"tid_list,omitempty"` // 档案Tid列表

	EffectiveStartDate *string `json:"effective_start_date,omitempty"` // 生效开始时间

	EffectiveEndDate *string `json:"effective_end_date,omitempty"` // 生效结束时间
}

type QueryArchiveReq struct {
	apiReq *larkcore.ApiReq
	Body   *QueryArchiveReqBody `body:""`
}

type QueryArchiveRespData struct {
	Items []*ArchiveDetail `json:"items,omitempty"` // 档案信息列表

	PageToken *string `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token

	HasMore *bool `json:"has_more,omitempty"` // 是否还有更多项
}

type QueryArchiveResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *QueryArchiveRespData `json:"data"` // 业务数据
}

func (resp *QueryArchiveResp) Success() bool {
	return resp.Code == 0
}

type ListChangeReasonReqBuilder struct {
	apiReq *larkcore.ApiReq
	limit  int // 最大返回多少记录，当使用迭代器访问时才有效
}

func NewListChangeReasonReqBuilder() *ListChangeReasonReqBuilder {
	builder := &ListChangeReasonReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 最大返回多少记录，当使用迭代器访问时才有效
func (builder *ListChangeReasonReqBuilder) Limit(limit int) *ListChangeReasonReqBuilder {
	builder.limit = limit
	return builder
}

// 分页大小
//
// 示例值：100
func (builder *ListChangeReasonReqBuilder) PageSize(pageSize int) *ListChangeReasonReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
//
// 示例值：12314342
func (builder *ListChangeReasonReqBuilder) PageToken(pageToken string) *ListChangeReasonReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

func (builder *ListChangeReasonReqBuilder) Build() *ListChangeReasonReq {
	req := &ListChangeReasonReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListChangeReasonReq struct {
	apiReq *larkcore.ApiReq
	Limit  int // 最多返回多少记录，只有在使用迭代器访问时，才有效

}

type ListChangeReasonRespData struct {
	Items []*ChangeReason `json:"items,omitempty"` // 调薪原因信息列表

	PageToken *string `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token

	HasMore *bool `json:"has_more,omitempty"` // 是否还有更多项
}

type ListChangeReasonResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListChangeReasonRespData `json:"data"` // 业务数据
}

func (resp *ListChangeReasonResp) Success() bool {
	return resp.Code == 0
}

type ListIndicatorReqBuilder struct {
	apiReq *larkcore.ApiReq
	limit  int // 最大返回多少记录，当使用迭代器访问时才有效
}

func NewListIndicatorReqBuilder() *ListIndicatorReqBuilder {
	builder := &ListIndicatorReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 最大返回多少记录，当使用迭代器访问时才有效
func (builder *ListIndicatorReqBuilder) Limit(limit int) *ListIndicatorReqBuilder {
	builder.limit = limit
	return builder
}

// 分页大小
//
// 示例值：100
func (builder *ListIndicatorReqBuilder) PageSize(pageSize int) *ListIndicatorReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
//
// 示例值：123423321
func (builder *ListIndicatorReqBuilder) PageToken(pageToken string) *ListIndicatorReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

func (builder *ListIndicatorReqBuilder) Build() *ListIndicatorReq {
	req := &ListIndicatorReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListIndicatorReq struct {
	apiReq *larkcore.ApiReq
	Limit  int // 最多返回多少记录，只有在使用迭代器访问时，才有效

}

type ListIndicatorRespData struct {
	Items []*Indicator `json:"items,omitempty"` // 薪资统计指标信息列表

	PageToken *string `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token

	HasMore *bool `json:"has_more,omitempty"` // 是否还有更多项
}

type ListIndicatorResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListIndicatorRespData `json:"data"` // 业务数据
}

func (resp *ListIndicatorResp) Success() bool {
	return resp.Code == 0
}

type ListItemReqBuilder struct {
	apiReq *larkcore.ApiReq
	limit  int // 最大返回多少记录，当使用迭代器访问时才有效
}

func NewListItemReqBuilder() *ListItemReqBuilder {
	builder := &ListItemReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 最大返回多少记录，当使用迭代器访问时才有效
func (builder *ListItemReqBuilder) Limit(limit int) *ListItemReqBuilder {
	builder.limit = limit
	return builder
}

// 分页大小
//
// 示例值：100
func (builder *ListItemReqBuilder) PageSize(pageSize int) *ListItemReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
//
// 示例值：5234233214
func (builder *ListItemReqBuilder) PageToken(pageToken string) *ListItemReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

// 薪酬项类型（不传则认为查询所有类型薪酬项）
//
// 示例值：bonus
func (builder *ListItemReqBuilder) ItemType(itemType string) *ListItemReqBuilder {
	builder.apiReq.QueryParams.Set("item_type", fmt.Sprint(itemType))
	return builder
}

func (builder *ListItemReqBuilder) Build() *ListItemReq {
	req := &ListItemReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListItemReq struct {
	apiReq *larkcore.ApiReq
	Limit  int // 最多返回多少记录，只有在使用迭代器访问时，才有效

}

type ListItemRespData struct {
	Items []*Item `json:"items,omitempty"` // 薪酬项信息列表

	PageToken *string `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token

	HasMore *bool `json:"has_more,omitempty"` // 是否还有更多项
}

type ListItemResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListItemRespData `json:"data"` // 业务数据
}

func (resp *ListItemResp) Success() bool {
	return resp.Code == 0
}

type ListItemCategoryReqBuilder struct {
	apiReq *larkcore.ApiReq
	limit  int // 最大返回多少记录，当使用迭代器访问时才有效
}

func NewListItemCategoryReqBuilder() *ListItemCategoryReqBuilder {
	builder := &ListItemCategoryReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 最大返回多少记录，当使用迭代器访问时才有效
func (builder *ListItemCategoryReqBuilder) Limit(limit int) *ListItemCategoryReqBuilder {
	builder.limit = limit
	return builder
}

// 分页大小
//
// 示例值：100
func (builder *ListItemCategoryReqBuilder) PageSize(pageSize int) *ListItemCategoryReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
//
// 示例值：231412341234
func (builder *ListItemCategoryReqBuilder) PageToken(pageToken string) *ListItemCategoryReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

func (builder *ListItemCategoryReqBuilder) Build() *ListItemCategoryReq {
	req := &ListItemCategoryReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListItemCategoryReq struct {
	apiReq *larkcore.ApiReq
	Limit  int // 最多返回多少记录，只有在使用迭代器访问时，才有效

}

type ListItemCategoryRespData struct {
	Items []*ItemCategory `json:"items,omitempty"` // 薪酬项分类信息列表

	PageToken *string `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token

	HasMore *bool `json:"has_more,omitempty"` // 是否还有更多项
}

type ListItemCategoryResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListItemCategoryRespData `json:"data"` // 业务数据
}

func (resp *ListItemCategoryResp) Success() bool {
	return resp.Code == 0
}

type ListPlanReqBuilder struct {
	apiReq *larkcore.ApiReq
	limit  int // 最大返回多少记录，当使用迭代器访问时才有效
}

func NewListPlanReqBuilder() *ListPlanReqBuilder {
	builder := &ListPlanReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 最大返回多少记录，当使用迭代器访问时才有效
func (builder *ListPlanReqBuilder) Limit(limit int) *ListPlanReqBuilder {
	builder.limit = limit
	return builder
}

// 分页大小
//
// 示例值：100
func (builder *ListPlanReqBuilder) PageSize(pageSize int) *ListPlanReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
//
// 示例值：213432123
func (builder *ListPlanReqBuilder) PageToken(pageToken string) *ListPlanReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

func (builder *ListPlanReqBuilder) Build() *ListPlanReq {
	req := &ListPlanReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListPlanReq struct {
	apiReq *larkcore.ApiReq
	Limit  int // 最多返回多少记录，只有在使用迭代器访问时，才有效

}

type ListPlanRespData struct {
	Items []*PlanDetail `json:"items,omitempty"` // 薪资方案信息列表

	PageToken *string `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token

	HasMore *bool `json:"has_more,omitempty"` // 是否还有更多项
}

type ListPlanResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListPlanRespData `json:"data"` // 业务数据
}

func (resp *ListPlanResp) Success() bool {
	return resp.Code == 0
}

type ListChangeReasonIterator struct {
	nextPageToken *string
	items         []*ChangeReason
	index         int
	limit         int
	ctx           context.Context
	req           *ListChangeReasonReq
	listFunc      func(ctx context.Context, req *ListChangeReasonReq, options ...larkcore.RequestOptionFunc) (*ListChangeReasonResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *ListChangeReasonIterator) Next() (bool, *ChangeReason, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListChangeReasonIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

type ListIndicatorIterator struct {
	nextPageToken *string
	items         []*Indicator
	index         int
	limit         int
	ctx           context.Context
	req           *ListIndicatorReq
	listFunc      func(ctx context.Context, req *ListIndicatorReq, options ...larkcore.RequestOptionFunc) (*ListIndicatorResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *ListIndicatorIterator) Next() (bool, *Indicator, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListIndicatorIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

type ListItemIterator struct {
	nextPageToken *string
	items         []*Item
	index         int
	limit         int
	ctx           context.Context
	req           *ListItemReq
	listFunc      func(ctx context.Context, req *ListItemReq, options ...larkcore.RequestOptionFunc) (*ListItemResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *ListItemIterator) Next() (bool, *Item, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListItemIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

type ListItemCategoryIterator struct {
	nextPageToken *string
	items         []*ItemCategory
	index         int
	limit         int
	ctx           context.Context
	req           *ListItemCategoryReq
	listFunc      func(ctx context.Context, req *ListItemCategoryReq, options ...larkcore.RequestOptionFunc) (*ListItemCategoryResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *ListItemCategoryIterator) Next() (bool, *ItemCategory, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListItemCategoryIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

type ListPlanIterator struct {
	nextPageToken *string
	items         []*PlanDetail
	index         int
	limit         int
	ctx           context.Context
	req           *ListPlanReq
	listFunc      func(ctx context.Context, req *ListPlanReq, options ...larkcore.RequestOptionFunc) (*ListPlanResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *ListPlanIterator) Next() (bool, *PlanDetail, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListPlanIterator) NextPageToken() *string {
	return iterator.nextPageToken
}
